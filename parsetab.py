
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW ASSIGN ASYNC AWAIT COLON COMMA COMMENT CONSOLE CONST DIVIDE DOT ELSE EQUALS FUNCTION GT ID IF LBRACE LBRACKET LET LOG LPAREN LT MINUS NEW NOTEQUALS NUMBER PLUS PROMISE RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TERNARY TIMES VAR WHILEprogram : statementsstatements : statement\n| statements statementstatement : expression SEMICOLON\n| declaration SEMICOLON\n| assignment SEMICOLON\n| method_call SEMICOLONdeclaration : VAR ID\n| LET ID\n| CONST ID\n| VAR ID ASSIGN expression\n| LET ID ASSIGN expression\n| CONST ID ASSIGN expressionassignment : ID ASSIGN expressionexpression : term\n| expression PLUS term\n| expression MINUS termterm : factor\n| term TIMES factor\n| term DIVIDE factorfactor : NUMBER\n| STRING\n| ID\n| LPAREN expression RPAREN\n| method_callmethod_call : CONSOLE DOT LOG LPAREN arguments RPAREN\n| ID DOT ID LPAREN arguments RPARENarguments : \n| expression\n| arguments COMMA expression'
    
_lr_action_items = {'VAR':([0,2,3,18,19,22,23,24,],[9,9,-2,-3,-4,-5,-6,-7,]),'LET':([0,2,3,18,19,22,23,24,],[11,11,-2,-3,-4,-5,-6,-7,]),'CONST':([0,2,3,18,19,22,23,24,],[12,12,-2,-3,-4,-5,-6,-7,]),'ID':([0,2,3,9,11,12,14,18,19,20,21,22,23,24,25,26,28,29,40,43,44,48,51,56,],[10,10,-2,27,30,31,34,-3,-4,34,34,-5,-6,-7,34,34,34,42,34,34,34,34,34,34,]),'CONSOLE':([0,2,3,14,18,19,20,21,22,23,24,25,26,28,40,43,44,48,51,56,],[13,13,-2,13,-3,-4,13,13,-5,-6,-7,13,13,13,13,13,13,13,13,13,]),'NUMBER':([0,2,3,14,18,19,20,21,22,23,24,25,26,28,40,43,44,48,51,56,],[16,16,-2,16,-3,-4,16,16,-5,-6,-7,16,16,16,16,16,16,16,16,16,]),'STRING':([0,2,3,14,18,19,20,21,22,23,24,25,26,28,40,43,44,48,51,56,],[17,17,-2,17,-3,-4,17,17,-5,-6,-7,17,17,17,17,17,17,17,17,17,]),'LPAREN':([0,2,3,14,18,19,20,21,22,23,24,25,26,28,40,42,43,44,45,48,51,56,],[14,14,-2,14,-3,-4,14,14,-5,-6,-7,14,14,14,14,48,14,14,51,14,14,14,]),'$end':([1,2,3,18,19,22,23,24,],[0,-1,-2,-3,-4,-5,-6,-7,]),'SEMICOLON':([4,5,6,7,8,10,15,16,17,27,30,31,34,35,36,37,38,39,41,46,47,49,50,55,57,],[19,22,23,24,-15,-23,-18,-21,-22,-8,-9,-10,-23,-25,-16,-17,-19,-20,-14,-24,-11,-12,-13,-27,-26,]),'PLUS':([4,7,8,10,15,16,17,33,34,35,36,37,38,39,41,46,47,49,50,53,55,57,58,],[20,-25,-15,-23,-18,-21,-22,20,-23,-25,-16,-17,-19,-20,20,-24,20,20,20,20,-27,-26,20,]),'MINUS':([4,7,8,10,15,16,17,33,34,35,36,37,38,39,41,46,47,49,50,53,55,57,58,],[21,-25,-15,-23,-18,-21,-22,21,-23,-25,-16,-17,-19,-20,21,-24,21,21,21,21,-27,-26,21,]),'TIMES':([7,8,10,15,16,17,34,35,36,37,38,39,46,55,57,],[-25,25,-23,-18,-21,-22,-23,-25,25,25,-19,-20,-24,-27,-26,]),'DIVIDE':([7,8,10,15,16,17,34,35,36,37,38,39,46,55,57,],[-25,26,-23,-18,-21,-22,-23,-25,26,26,-19,-20,-24,-27,-26,]),'RPAREN':([8,15,16,17,33,34,35,36,37,38,39,46,48,51,52,53,54,55,57,58,],[-15,-18,-21,-22,46,-23,-25,-16,-17,-19,-20,-24,-28,-28,55,-29,57,-27,-26,-30,]),'COMMA':([8,15,16,17,34,35,36,37,38,39,46,48,51,52,53,54,55,57,58,],[-15,-18,-21,-22,-23,-25,-16,-17,-19,-20,-24,-28,-28,56,-29,56,-27,-26,-30,]),'ASSIGN':([10,27,30,31,],[28,40,43,44,]),'DOT':([10,13,34,],[29,32,29,]),'LOG':([32,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,18,]),'expression':([0,2,14,28,40,43,44,48,51,56,],[4,4,33,41,47,49,50,53,53,58,]),'declaration':([0,2,],[5,5,]),'assignment':([0,2,],[6,6,]),'method_call':([0,2,14,20,21,25,26,28,40,43,44,48,51,56,],[7,7,35,35,35,35,35,35,35,35,35,35,35,35,]),'term':([0,2,14,20,21,28,40,43,44,48,51,56,],[8,8,8,36,37,8,8,8,8,8,8,8,]),'factor':([0,2,14,20,21,25,26,28,40,43,44,48,51,56,],[15,15,15,15,15,38,39,15,15,15,15,15,15,15,]),'arguments':([48,51,],[52,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',21),
  ('statements -> statement','statements',1,'p_statements','parser.py',25),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',26),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',34),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','parser.py',35),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','parser.py',36),
  ('statement -> method_call SEMICOLON','statement',2,'p_statement','parser.py',37),
  ('declaration -> VAR ID','declaration',2,'p_declaration','parser.py',41),
  ('declaration -> LET ID','declaration',2,'p_declaration','parser.py',42),
  ('declaration -> CONST ID','declaration',2,'p_declaration','parser.py',43),
  ('declaration -> VAR ID ASSIGN expression','declaration',4,'p_declaration','parser.py',44),
  ('declaration -> LET ID ASSIGN expression','declaration',4,'p_declaration','parser.py',45),
  ('declaration -> CONST ID ASSIGN expression','declaration',4,'p_declaration','parser.py',46),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',53),
  ('expression -> term','expression',1,'p_expression','parser.py',57),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',58),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',59),
  ('term -> factor','term',1,'p_term','parser.py',66),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',67),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',68),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',75),
  ('factor -> STRING','factor',1,'p_factor','parser.py',76),
  ('factor -> ID','factor',1,'p_factor','parser.py',77),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',78),
  ('factor -> method_call','factor',1,'p_factor','parser.py',79),
  ('method_call -> CONSOLE DOT LOG LPAREN arguments RPAREN','method_call',6,'p_method_call','parser.py',95),
  ('method_call -> ID DOT ID LPAREN arguments RPAREN','method_call',6,'p_method_call','parser.py',96),
  ('arguments -> <empty>','arguments',0,'p_arguments','parser.py',105),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',106),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',107),
]
