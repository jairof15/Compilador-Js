Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     program -> empty
Rule 3     statements -> statement
Rule 4     statements -> statements statement
Rule 5     statements -> empty
Rule 6     statement -> expression
Rule 7     statement -> declaration
Rule 8     statement -> assignment
Rule 9     statement -> method_call
Rule 10    statement -> expression SEMICOLON
Rule 11    statement -> declaration SEMICOLON
Rule 12    statement -> assignment SEMICOLON
Rule 13    statement -> method_call SEMICOLON
Rule 14    statement -> function_declaration
Rule 15    statement -> if_statement
Rule 16    statement -> while_statement
Rule 17    statement -> for_statement
Rule 18    statement -> break_statement
Rule 19    statement -> switch_statement
Rule 20    statement -> try_catch_statement
Rule 21    statement -> throw_statement
Rule 22    function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block
Rule 23    parameter_list -> <empty>
Rule 24    parameter_list -> ID
Rule 25    parameter_list -> parameter_list COMMA ID
Rule 26    statement -> RETURN expression SEMICOLON
Rule 27    declaration -> VAR ID
Rule 28    declaration -> LET ID
Rule 29    declaration -> CONST ID
Rule 30    declaration -> VAR ID ASSIGN expression
Rule 31    declaration -> LET ID ASSIGN expression
Rule 32    declaration -> CONST ID ASSIGN expression
Rule 33    assignment -> ID ASSIGN expression
Rule 34    expression -> expression QUESTION expression COLON expression
Rule 35    expression -> term
Rule 36    expression -> expression PLUS term
Rule 37    expression -> expression MINUS term
Rule 38    expression -> expression GT term
Rule 39    expression -> expression LT term
Rule 40    expression -> expression GE term
Rule 41    expression -> expression LE term
Rule 42    expression -> expression EQUALS term
Rule 43    expression -> expression NOTEQUALS term
Rule 44    expression -> expression AND term
Rule 45    expression -> expression OR term
Rule 46    expression -> array_literal
Rule 47    expression -> array_access
Rule 48    term -> factor
Rule 49    term -> term TIMES factor
Rule 50    term -> term DIVIDE factor
Rule 51    factor -> NUMBER
Rule 52    factor -> STRING
Rule 53    factor -> ID
Rule 54    factor -> LPAREN expression RPAREN
Rule 55    factor -> method_call
Rule 56    factor -> function_call
Rule 57    factor -> array_access
Rule 58    factor -> property_access
Rule 59    factor -> NOT factor
Rule 60    factor -> object_literal
Rule 61    factor -> arrow_function
Rule 62    factor -> anonymous_function
Rule 63    factor -> TRUE
Rule 64    factor -> FALSE
Rule 65    function_call -> ID LPAREN arguments RPAREN
Rule 66    method_call -> console_log
Rule 67    method_call -> ID DOT ID LPAREN arguments RPAREN
Rule 68    console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN
Rule 69    arguments -> <empty>
Rule 70    arguments -> expression
Rule 71    arguments -> arguments COMMA expression
Rule 72    if_statement -> IF LPAREN condition RPAREN block
Rule 73    if_statement -> IF LPAREN condition RPAREN block ELSE block
Rule 74    condition -> expression
Rule 75    condition -> expression GT expression
Rule 76    condition -> expression LT expression
Rule 77    condition -> expression GE expression
Rule 78    condition -> expression LE expression
Rule 79    condition -> expression EQUALS expression
Rule 80    condition -> expression NOTEQUALS expression
Rule 81    array_literal -> LBRACKET array_elements RBRACKET
Rule 82    array_elements -> <empty>
Rule 83    array_elements -> expression
Rule 84    array_elements -> array_elements COMMA expression
Rule 85    array_access -> ID LBRACKET expression RBRACKET
Rule 86    while_statement -> WHILE LPAREN condition RPAREN block
Rule 87    block -> LBRACE statements RBRACE
Rule 88    empty -> <empty>
Rule 89    property_access -> ID DOT ID
Rule 90    break_statement -> BREAK SEMICOLON
Rule 91    for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
Rule 92    for_init -> declaration
Rule 93    for_init -> assignment
Rule 94    for_init -> empty
Rule 95    for_condition -> expression
Rule 96    for_condition -> empty
Rule 97    for_update -> assignment
Rule 98    for_update -> expression
Rule 99    for_update -> empty
Rule 100   object_literal -> LBRACE object_properties RBRACE
Rule 101   object_properties -> object_property
Rule 102   object_properties -> object_properties COMMA object_property
Rule 103   object_properties -> empty
Rule 104   object_property -> ID COLON expression
Rule 105   arrow_function -> LPAREN parameter_list RPAREN ARROW expression
Rule 106   switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
Rule 107   case_blocks -> case_blocks case_block
Rule 108   case_blocks -> case_block
Rule 109   case_block -> CASE error COLON
Rule 110   case_block -> CASE expression COLON statements
Rule 111   default_block -> DEFAULT COLON statements
Rule 112   default_block -> empty
Rule 113   anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block
Rule 114   try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block
Rule 115   throw_statement -> THROW expression SEMICOLON
Rule 116   if_statement -> IF error block
Rule 117   declaration -> VAR error
Rule 118   declaration -> LET error
Rule 119   declaration -> CONST error
Rule 120   switch_statement -> SWITCH error block
Rule 121   for_statement -> FOR error block
Rule 122   if_statement -> IF LPAREN error block
Rule 123   block -> LBRACE statements error
Rule 124   function_declaration -> FUNCTION ID LPAREN error RPAREN block
Rule 125   case_block -> CASE error COLON statements
Rule 126   switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE

Terminals, with rules where they appear

AND                  : 44
ARROW                : 105
ASSIGN               : 30 31 32 33
BREAK                : 90
CASE                 : 109 110 125
CATCH                : 114
COLON                : 34 104 109 110 111 125
COMMA                : 25 71 84 102
CONSOLE              : 68
CONST                : 29 32 119
DEFAULT              : 111
DIVIDE               : 50
DOT                  : 67 68 89
ELSE                 : 73
EQUALS               : 42 79
FALSE                : 64
FOR                  : 91 121
FUNCTION             : 22 113 124
GE                   : 40 77
GT                   : 38 75
ID                   : 22 24 25 27 28 29 30 31 32 33 53 65 67 67 85 89 89 104 114 124
IF                   : 72 73 116 122
LBRACE               : 87 100 106 123 126
LBRACKET             : 81 85
LE                   : 41 78
LET                  : 28 31 118
LOG                  : 68
LPAREN               : 22 54 65 67 68 72 73 86 91 105 106 113 114 122 124 126
LT                   : 39 76
MINUS                : 37
NOT                  : 59
NOTEQUALS            : 43 80
NUMBER               : 51
OR                   : 45
PLUS                 : 36
QUESTION             : 34
RBRACE               : 87 100 106 126
RBRACKET             : 81 85
RETURN               : 26
RPAREN               : 22 54 65 67 68 72 73 86 91 105 106 113 114 124 126
SEMICOLON            : 10 11 12 13 26 90 91 91 115
STRING               : 52
SWITCH               : 106 120 126
THROW                : 115
TIMES                : 49
TRUE                 : 63
TRY                  : 114
VAR                  : 27 30 117
WHILE                : 86
error                : 109 116 117 118 119 120 121 122 123 124 125 126

Nonterminals, with rules where they appear

anonymous_function   : 62
arguments            : 65 67 68 71
array_access         : 47 57
array_elements       : 81 84
array_literal        : 46
arrow_function       : 61
assignment           : 8 12 93 97
block                : 22 72 73 73 86 91 113 114 114 116 120 121 122 124
break_statement      : 18
case_block           : 107 108
case_blocks          : 106 107 126
condition            : 72 73 86
console_log          : 66
declaration          : 7 11 92
default_block        : 106 126
empty                : 2 5 94 96 99 103 112
expression           : 6 10 26 30 31 32 33 34 34 34 36 37 38 39 40 41 42 43 44 45 54 70 71 74 75 75 76 76 77 77 78 78 79 79 80 80 83 84 85 95 98 104 105 106 110 115
factor               : 48 49 50 59
for_condition        : 91
for_init             : 91
for_statement        : 17
for_update           : 91
function_call        : 56
function_declaration : 14
if_statement         : 15
method_call          : 9 13 55
object_literal       : 60
object_properties    : 100 102
object_property      : 101 102
parameter_list       : 22 25 105 113
program              : 0
property_access      : 58
statement            : 3 4
statements           : 1 4 87 110 111 123 125
switch_statement     : 19
term                 : 35 36 37 38 39 40 41 42 43 44 45 49 50
throw_statement      : 21
try_catch_statement  : 20
while_statement      : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) program -> . empty
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (88) empty -> .
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    $end            reduce using rule 88 (empty -> .)
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! VAR             [ reduce using rule 88 (empty -> .) ]
  ! LET             [ reduce using rule 88 (empty -> .) ]
  ! CONST           [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! WHILE           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! BREAK           [ reduce using rule 88 (empty -> .) ]
  ! SWITCH          [ reduce using rule 88 (empty -> .) ]
  ! TRY             [ reduce using rule 88 (empty -> .) ]
  ! THROW           [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 88 (empty -> .) ]
  ! NUMBER          [ reduce using rule 88 (empty -> .) ]
  ! STRING          [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! NOT             [ reduce using rule 88 (empty -> .) ]
  ! TRUE            [ reduce using rule 88 (empty -> .) ]
  ! FALSE           [ reduce using rule 88 (empty -> .) ]
  ! LBRACE          [ reduce using rule 88 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    empty                          shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (4) statements -> statements . statement
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

    $end            reduce using rule 1 (program -> statements .)
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

    statement                      shift and go to state 49
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 3

    (2) program -> empty .
    (5) statements -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)
    RETURN          reduce using rule 5 (statements -> empty .)
    VAR             reduce using rule 5 (statements -> empty .)
    LET             reduce using rule 5 (statements -> empty .)
    CONST           reduce using rule 5 (statements -> empty .)
    ID              reduce using rule 5 (statements -> empty .)
    FUNCTION        reduce using rule 5 (statements -> empty .)
    IF              reduce using rule 5 (statements -> empty .)
    WHILE           reduce using rule 5 (statements -> empty .)
    FOR             reduce using rule 5 (statements -> empty .)
    BREAK           reduce using rule 5 (statements -> empty .)
    SWITCH          reduce using rule 5 (statements -> empty .)
    TRY             reduce using rule 5 (statements -> empty .)
    THROW           reduce using rule 5 (statements -> empty .)
    LBRACKET        reduce using rule 5 (statements -> empty .)
    CONSOLE         reduce using rule 5 (statements -> empty .)
    NUMBER          reduce using rule 5 (statements -> empty .)
    STRING          reduce using rule 5 (statements -> empty .)
    LPAREN          reduce using rule 5 (statements -> empty .)
    NOT             reduce using rule 5 (statements -> empty .)
    TRUE            reduce using rule 5 (statements -> empty .)
    FALSE           reduce using rule 5 (statements -> empty .)
    LBRACE          reduce using rule 5 (statements -> empty .)

  ! $end            [ reduce using rule 5 (statements -> empty .) ]


state 4

    (3) statements -> statement .

    RETURN          reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    LET             reduce using rule 3 (statements -> statement .)
    CONST           reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    FUNCTION        reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    TRY             reduce using rule 3 (statements -> statement .)
    THROW           reduce using rule 3 (statements -> statement .)
    LBRACKET        reduce using rule 3 (statements -> statement .)
    CONSOLE         reduce using rule 3 (statements -> statement .)
    NUMBER          reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    NOT             reduce using rule 3 (statements -> statement .)
    TRUE            reduce using rule 3 (statements -> statement .)
    FALSE           reduce using rule 3 (statements -> statement .)
    LBRACE          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    DEFAULT         reduce using rule 3 (statements -> statement .)
    CASE            reduce using rule 3 (statements -> statement .)


state 5

    (6) statement -> expression .
    (10) statement -> expression . SEMICOLON
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RETURN          reduce using rule 6 (statement -> expression .)
    VAR             reduce using rule 6 (statement -> expression .)
    LET             reduce using rule 6 (statement -> expression .)
    CONST           reduce using rule 6 (statement -> expression .)
    ID              reduce using rule 6 (statement -> expression .)
    FUNCTION        reduce using rule 6 (statement -> expression .)
    IF              reduce using rule 6 (statement -> expression .)
    WHILE           reduce using rule 6 (statement -> expression .)
    FOR             reduce using rule 6 (statement -> expression .)
    BREAK           reduce using rule 6 (statement -> expression .)
    SWITCH          reduce using rule 6 (statement -> expression .)
    TRY             reduce using rule 6 (statement -> expression .)
    THROW           reduce using rule 6 (statement -> expression .)
    LBRACKET        reduce using rule 6 (statement -> expression .)
    CONSOLE         reduce using rule 6 (statement -> expression .)
    NUMBER          reduce using rule 6 (statement -> expression .)
    STRING          reduce using rule 6 (statement -> expression .)
    LPAREN          reduce using rule 6 (statement -> expression .)
    NOT             reduce using rule 6 (statement -> expression .)
    TRUE            reduce using rule 6 (statement -> expression .)
    FALSE           reduce using rule 6 (statement -> expression .)
    LBRACE          reduce using rule 6 (statement -> expression .)
    $end            reduce using rule 6 (statement -> expression .)
    RBRACE          reduce using rule 6 (statement -> expression .)
    error           reduce using rule 6 (statement -> expression .)
    DEFAULT         reduce using rule 6 (statement -> expression .)
    CASE            reduce using rule 6 (statement -> expression .)
    SEMICOLON       shift and go to state 50
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 6

    (7) statement -> declaration .
    (11) statement -> declaration . SEMICOLON

    RETURN          reduce using rule 7 (statement -> declaration .)
    VAR             reduce using rule 7 (statement -> declaration .)
    LET             reduce using rule 7 (statement -> declaration .)
    CONST           reduce using rule 7 (statement -> declaration .)
    ID              reduce using rule 7 (statement -> declaration .)
    FUNCTION        reduce using rule 7 (statement -> declaration .)
    IF              reduce using rule 7 (statement -> declaration .)
    WHILE           reduce using rule 7 (statement -> declaration .)
    FOR             reduce using rule 7 (statement -> declaration .)
    BREAK           reduce using rule 7 (statement -> declaration .)
    SWITCH          reduce using rule 7 (statement -> declaration .)
    TRY             reduce using rule 7 (statement -> declaration .)
    THROW           reduce using rule 7 (statement -> declaration .)
    LBRACKET        reduce using rule 7 (statement -> declaration .)
    CONSOLE         reduce using rule 7 (statement -> declaration .)
    NUMBER          reduce using rule 7 (statement -> declaration .)
    STRING          reduce using rule 7 (statement -> declaration .)
    LPAREN          reduce using rule 7 (statement -> declaration .)
    NOT             reduce using rule 7 (statement -> declaration .)
    TRUE            reduce using rule 7 (statement -> declaration .)
    FALSE           reduce using rule 7 (statement -> declaration .)
    LBRACE          reduce using rule 7 (statement -> declaration .)
    $end            reduce using rule 7 (statement -> declaration .)
    RBRACE          reduce using rule 7 (statement -> declaration .)
    error           reduce using rule 7 (statement -> declaration .)
    DEFAULT         reduce using rule 7 (statement -> declaration .)
    CASE            reduce using rule 7 (statement -> declaration .)
    SEMICOLON       shift and go to state 62


state 7

    (8) statement -> assignment .
    (12) statement -> assignment . SEMICOLON

    RETURN          reduce using rule 8 (statement -> assignment .)
    VAR             reduce using rule 8 (statement -> assignment .)
    LET             reduce using rule 8 (statement -> assignment .)
    CONST           reduce using rule 8 (statement -> assignment .)
    ID              reduce using rule 8 (statement -> assignment .)
    FUNCTION        reduce using rule 8 (statement -> assignment .)
    IF              reduce using rule 8 (statement -> assignment .)
    WHILE           reduce using rule 8 (statement -> assignment .)
    FOR             reduce using rule 8 (statement -> assignment .)
    BREAK           reduce using rule 8 (statement -> assignment .)
    SWITCH          reduce using rule 8 (statement -> assignment .)
    TRY             reduce using rule 8 (statement -> assignment .)
    THROW           reduce using rule 8 (statement -> assignment .)
    LBRACKET        reduce using rule 8 (statement -> assignment .)
    CONSOLE         reduce using rule 8 (statement -> assignment .)
    NUMBER          reduce using rule 8 (statement -> assignment .)
    STRING          reduce using rule 8 (statement -> assignment .)
    LPAREN          reduce using rule 8 (statement -> assignment .)
    NOT             reduce using rule 8 (statement -> assignment .)
    TRUE            reduce using rule 8 (statement -> assignment .)
    FALSE           reduce using rule 8 (statement -> assignment .)
    LBRACE          reduce using rule 8 (statement -> assignment .)
    $end            reduce using rule 8 (statement -> assignment .)
    RBRACE          reduce using rule 8 (statement -> assignment .)
    error           reduce using rule 8 (statement -> assignment .)
    DEFAULT         reduce using rule 8 (statement -> assignment .)
    CASE            reduce using rule 8 (statement -> assignment .)
    SEMICOLON       shift and go to state 63


state 8

    (9) statement -> method_call .
    (13) statement -> method_call . SEMICOLON
    (55) factor -> method_call .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for VAR resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for LET resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for CONST resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for ID resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for IF resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for SWITCH resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for TRY resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for THROW resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for STRING resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for TRUE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for FALSE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for LBRACE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for $end resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for error resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 9 (statement -> method_call .)
  ! reduce/reduce conflict for CASE resolved using rule 9 (statement -> method_call .)
    RETURN          reduce using rule 9 (statement -> method_call .)
    VAR             reduce using rule 9 (statement -> method_call .)
    LET             reduce using rule 9 (statement -> method_call .)
    CONST           reduce using rule 9 (statement -> method_call .)
    ID              reduce using rule 9 (statement -> method_call .)
    FUNCTION        reduce using rule 9 (statement -> method_call .)
    IF              reduce using rule 9 (statement -> method_call .)
    WHILE           reduce using rule 9 (statement -> method_call .)
    FOR             reduce using rule 9 (statement -> method_call .)
    BREAK           reduce using rule 9 (statement -> method_call .)
    SWITCH          reduce using rule 9 (statement -> method_call .)
    TRY             reduce using rule 9 (statement -> method_call .)
    THROW           reduce using rule 9 (statement -> method_call .)
    LBRACKET        reduce using rule 9 (statement -> method_call .)
    CONSOLE         reduce using rule 9 (statement -> method_call .)
    NUMBER          reduce using rule 9 (statement -> method_call .)
    STRING          reduce using rule 9 (statement -> method_call .)
    LPAREN          reduce using rule 9 (statement -> method_call .)
    NOT             reduce using rule 9 (statement -> method_call .)
    TRUE            reduce using rule 9 (statement -> method_call .)
    FALSE           reduce using rule 9 (statement -> method_call .)
    LBRACE          reduce using rule 9 (statement -> method_call .)
    $end            reduce using rule 9 (statement -> method_call .)
    RBRACE          reduce using rule 9 (statement -> method_call .)
    error           reduce using rule 9 (statement -> method_call .)
    DEFAULT         reduce using rule 9 (statement -> method_call .)
    CASE            reduce using rule 9 (statement -> method_call .)
    SEMICOLON       shift and go to state 64
    TIMES           reduce using rule 55 (factor -> method_call .)
    DIVIDE          reduce using rule 55 (factor -> method_call .)
    QUESTION        reduce using rule 55 (factor -> method_call .)
    PLUS            reduce using rule 55 (factor -> method_call .)
    MINUS           reduce using rule 55 (factor -> method_call .)
    GT              reduce using rule 55 (factor -> method_call .)
    LT              reduce using rule 55 (factor -> method_call .)
    GE              reduce using rule 55 (factor -> method_call .)
    LE              reduce using rule 55 (factor -> method_call .)
    EQUALS          reduce using rule 55 (factor -> method_call .)
    NOTEQUALS       reduce using rule 55 (factor -> method_call .)
    AND             reduce using rule 55 (factor -> method_call .)
    OR              reduce using rule 55 (factor -> method_call .)

  ! SEMICOLON       [ reduce using rule 55 (factor -> method_call .) ]
  ! RETURN          [ reduce using rule 55 (factor -> method_call .) ]
  ! VAR             [ reduce using rule 55 (factor -> method_call .) ]
  ! LET             [ reduce using rule 55 (factor -> method_call .) ]
  ! CONST           [ reduce using rule 55 (factor -> method_call .) ]
  ! ID              [ reduce using rule 55 (factor -> method_call .) ]
  ! FUNCTION        [ reduce using rule 55 (factor -> method_call .) ]
  ! IF              [ reduce using rule 55 (factor -> method_call .) ]
  ! WHILE           [ reduce using rule 55 (factor -> method_call .) ]
  ! FOR             [ reduce using rule 55 (factor -> method_call .) ]
  ! BREAK           [ reduce using rule 55 (factor -> method_call .) ]
  ! SWITCH          [ reduce using rule 55 (factor -> method_call .) ]
  ! TRY             [ reduce using rule 55 (factor -> method_call .) ]
  ! THROW           [ reduce using rule 55 (factor -> method_call .) ]
  ! LBRACKET        [ reduce using rule 55 (factor -> method_call .) ]
  ! CONSOLE         [ reduce using rule 55 (factor -> method_call .) ]
  ! NUMBER          [ reduce using rule 55 (factor -> method_call .) ]
  ! STRING          [ reduce using rule 55 (factor -> method_call .) ]
  ! LPAREN          [ reduce using rule 55 (factor -> method_call .) ]
  ! NOT             [ reduce using rule 55 (factor -> method_call .) ]
  ! TRUE            [ reduce using rule 55 (factor -> method_call .) ]
  ! FALSE           [ reduce using rule 55 (factor -> method_call .) ]
  ! LBRACE          [ reduce using rule 55 (factor -> method_call .) ]
  ! $end            [ reduce using rule 55 (factor -> method_call .) ]
  ! RBRACE          [ reduce using rule 55 (factor -> method_call .) ]
  ! error           [ reduce using rule 55 (factor -> method_call .) ]
  ! DEFAULT         [ reduce using rule 55 (factor -> method_call .) ]
  ! CASE            [ reduce using rule 55 (factor -> method_call .) ]


state 9

    (14) statement -> function_declaration .

    RETURN          reduce using rule 14 (statement -> function_declaration .)
    VAR             reduce using rule 14 (statement -> function_declaration .)
    LET             reduce using rule 14 (statement -> function_declaration .)
    CONST           reduce using rule 14 (statement -> function_declaration .)
    ID              reduce using rule 14 (statement -> function_declaration .)
    FUNCTION        reduce using rule 14 (statement -> function_declaration .)
    IF              reduce using rule 14 (statement -> function_declaration .)
    WHILE           reduce using rule 14 (statement -> function_declaration .)
    FOR             reduce using rule 14 (statement -> function_declaration .)
    BREAK           reduce using rule 14 (statement -> function_declaration .)
    SWITCH          reduce using rule 14 (statement -> function_declaration .)
    TRY             reduce using rule 14 (statement -> function_declaration .)
    THROW           reduce using rule 14 (statement -> function_declaration .)
    LBRACKET        reduce using rule 14 (statement -> function_declaration .)
    CONSOLE         reduce using rule 14 (statement -> function_declaration .)
    NUMBER          reduce using rule 14 (statement -> function_declaration .)
    STRING          reduce using rule 14 (statement -> function_declaration .)
    LPAREN          reduce using rule 14 (statement -> function_declaration .)
    NOT             reduce using rule 14 (statement -> function_declaration .)
    TRUE            reduce using rule 14 (statement -> function_declaration .)
    FALSE           reduce using rule 14 (statement -> function_declaration .)
    LBRACE          reduce using rule 14 (statement -> function_declaration .)
    $end            reduce using rule 14 (statement -> function_declaration .)
    RBRACE          reduce using rule 14 (statement -> function_declaration .)
    error           reduce using rule 14 (statement -> function_declaration .)
    DEFAULT         reduce using rule 14 (statement -> function_declaration .)
    CASE            reduce using rule 14 (statement -> function_declaration .)


state 10

    (15) statement -> if_statement .

    RETURN          reduce using rule 15 (statement -> if_statement .)
    VAR             reduce using rule 15 (statement -> if_statement .)
    LET             reduce using rule 15 (statement -> if_statement .)
    CONST           reduce using rule 15 (statement -> if_statement .)
    ID              reduce using rule 15 (statement -> if_statement .)
    FUNCTION        reduce using rule 15 (statement -> if_statement .)
    IF              reduce using rule 15 (statement -> if_statement .)
    WHILE           reduce using rule 15 (statement -> if_statement .)
    FOR             reduce using rule 15 (statement -> if_statement .)
    BREAK           reduce using rule 15 (statement -> if_statement .)
    SWITCH          reduce using rule 15 (statement -> if_statement .)
    TRY             reduce using rule 15 (statement -> if_statement .)
    THROW           reduce using rule 15 (statement -> if_statement .)
    LBRACKET        reduce using rule 15 (statement -> if_statement .)
    CONSOLE         reduce using rule 15 (statement -> if_statement .)
    NUMBER          reduce using rule 15 (statement -> if_statement .)
    STRING          reduce using rule 15 (statement -> if_statement .)
    LPAREN          reduce using rule 15 (statement -> if_statement .)
    NOT             reduce using rule 15 (statement -> if_statement .)
    TRUE            reduce using rule 15 (statement -> if_statement .)
    FALSE           reduce using rule 15 (statement -> if_statement .)
    LBRACE          reduce using rule 15 (statement -> if_statement .)
    $end            reduce using rule 15 (statement -> if_statement .)
    RBRACE          reduce using rule 15 (statement -> if_statement .)
    error           reduce using rule 15 (statement -> if_statement .)
    DEFAULT         reduce using rule 15 (statement -> if_statement .)
    CASE            reduce using rule 15 (statement -> if_statement .)


state 11

    (16) statement -> while_statement .

    RETURN          reduce using rule 16 (statement -> while_statement .)
    VAR             reduce using rule 16 (statement -> while_statement .)
    LET             reduce using rule 16 (statement -> while_statement .)
    CONST           reduce using rule 16 (statement -> while_statement .)
    ID              reduce using rule 16 (statement -> while_statement .)
    FUNCTION        reduce using rule 16 (statement -> while_statement .)
    IF              reduce using rule 16 (statement -> while_statement .)
    WHILE           reduce using rule 16 (statement -> while_statement .)
    FOR             reduce using rule 16 (statement -> while_statement .)
    BREAK           reduce using rule 16 (statement -> while_statement .)
    SWITCH          reduce using rule 16 (statement -> while_statement .)
    TRY             reduce using rule 16 (statement -> while_statement .)
    THROW           reduce using rule 16 (statement -> while_statement .)
    LBRACKET        reduce using rule 16 (statement -> while_statement .)
    CONSOLE         reduce using rule 16 (statement -> while_statement .)
    NUMBER          reduce using rule 16 (statement -> while_statement .)
    STRING          reduce using rule 16 (statement -> while_statement .)
    LPAREN          reduce using rule 16 (statement -> while_statement .)
    NOT             reduce using rule 16 (statement -> while_statement .)
    TRUE            reduce using rule 16 (statement -> while_statement .)
    FALSE           reduce using rule 16 (statement -> while_statement .)
    LBRACE          reduce using rule 16 (statement -> while_statement .)
    $end            reduce using rule 16 (statement -> while_statement .)
    RBRACE          reduce using rule 16 (statement -> while_statement .)
    error           reduce using rule 16 (statement -> while_statement .)
    DEFAULT         reduce using rule 16 (statement -> while_statement .)
    CASE            reduce using rule 16 (statement -> while_statement .)


state 12

    (17) statement -> for_statement .

    RETURN          reduce using rule 17 (statement -> for_statement .)
    VAR             reduce using rule 17 (statement -> for_statement .)
    LET             reduce using rule 17 (statement -> for_statement .)
    CONST           reduce using rule 17 (statement -> for_statement .)
    ID              reduce using rule 17 (statement -> for_statement .)
    FUNCTION        reduce using rule 17 (statement -> for_statement .)
    IF              reduce using rule 17 (statement -> for_statement .)
    WHILE           reduce using rule 17 (statement -> for_statement .)
    FOR             reduce using rule 17 (statement -> for_statement .)
    BREAK           reduce using rule 17 (statement -> for_statement .)
    SWITCH          reduce using rule 17 (statement -> for_statement .)
    TRY             reduce using rule 17 (statement -> for_statement .)
    THROW           reduce using rule 17 (statement -> for_statement .)
    LBRACKET        reduce using rule 17 (statement -> for_statement .)
    CONSOLE         reduce using rule 17 (statement -> for_statement .)
    NUMBER          reduce using rule 17 (statement -> for_statement .)
    STRING          reduce using rule 17 (statement -> for_statement .)
    LPAREN          reduce using rule 17 (statement -> for_statement .)
    NOT             reduce using rule 17 (statement -> for_statement .)
    TRUE            reduce using rule 17 (statement -> for_statement .)
    FALSE           reduce using rule 17 (statement -> for_statement .)
    LBRACE          reduce using rule 17 (statement -> for_statement .)
    $end            reduce using rule 17 (statement -> for_statement .)
    RBRACE          reduce using rule 17 (statement -> for_statement .)
    error           reduce using rule 17 (statement -> for_statement .)
    DEFAULT         reduce using rule 17 (statement -> for_statement .)
    CASE            reduce using rule 17 (statement -> for_statement .)


state 13

    (18) statement -> break_statement .

    RETURN          reduce using rule 18 (statement -> break_statement .)
    VAR             reduce using rule 18 (statement -> break_statement .)
    LET             reduce using rule 18 (statement -> break_statement .)
    CONST           reduce using rule 18 (statement -> break_statement .)
    ID              reduce using rule 18 (statement -> break_statement .)
    FUNCTION        reduce using rule 18 (statement -> break_statement .)
    IF              reduce using rule 18 (statement -> break_statement .)
    WHILE           reduce using rule 18 (statement -> break_statement .)
    FOR             reduce using rule 18 (statement -> break_statement .)
    BREAK           reduce using rule 18 (statement -> break_statement .)
    SWITCH          reduce using rule 18 (statement -> break_statement .)
    TRY             reduce using rule 18 (statement -> break_statement .)
    THROW           reduce using rule 18 (statement -> break_statement .)
    LBRACKET        reduce using rule 18 (statement -> break_statement .)
    CONSOLE         reduce using rule 18 (statement -> break_statement .)
    NUMBER          reduce using rule 18 (statement -> break_statement .)
    STRING          reduce using rule 18 (statement -> break_statement .)
    LPAREN          reduce using rule 18 (statement -> break_statement .)
    NOT             reduce using rule 18 (statement -> break_statement .)
    TRUE            reduce using rule 18 (statement -> break_statement .)
    FALSE           reduce using rule 18 (statement -> break_statement .)
    LBRACE          reduce using rule 18 (statement -> break_statement .)
    $end            reduce using rule 18 (statement -> break_statement .)
    RBRACE          reduce using rule 18 (statement -> break_statement .)
    error           reduce using rule 18 (statement -> break_statement .)
    DEFAULT         reduce using rule 18 (statement -> break_statement .)
    CASE            reduce using rule 18 (statement -> break_statement .)


state 14

    (19) statement -> switch_statement .

    RETURN          reduce using rule 19 (statement -> switch_statement .)
    VAR             reduce using rule 19 (statement -> switch_statement .)
    LET             reduce using rule 19 (statement -> switch_statement .)
    CONST           reduce using rule 19 (statement -> switch_statement .)
    ID              reduce using rule 19 (statement -> switch_statement .)
    FUNCTION        reduce using rule 19 (statement -> switch_statement .)
    IF              reduce using rule 19 (statement -> switch_statement .)
    WHILE           reduce using rule 19 (statement -> switch_statement .)
    FOR             reduce using rule 19 (statement -> switch_statement .)
    BREAK           reduce using rule 19 (statement -> switch_statement .)
    SWITCH          reduce using rule 19 (statement -> switch_statement .)
    TRY             reduce using rule 19 (statement -> switch_statement .)
    THROW           reduce using rule 19 (statement -> switch_statement .)
    LBRACKET        reduce using rule 19 (statement -> switch_statement .)
    CONSOLE         reduce using rule 19 (statement -> switch_statement .)
    NUMBER          reduce using rule 19 (statement -> switch_statement .)
    STRING          reduce using rule 19 (statement -> switch_statement .)
    LPAREN          reduce using rule 19 (statement -> switch_statement .)
    NOT             reduce using rule 19 (statement -> switch_statement .)
    TRUE            reduce using rule 19 (statement -> switch_statement .)
    FALSE           reduce using rule 19 (statement -> switch_statement .)
    LBRACE          reduce using rule 19 (statement -> switch_statement .)
    $end            reduce using rule 19 (statement -> switch_statement .)
    RBRACE          reduce using rule 19 (statement -> switch_statement .)
    error           reduce using rule 19 (statement -> switch_statement .)
    DEFAULT         reduce using rule 19 (statement -> switch_statement .)
    CASE            reduce using rule 19 (statement -> switch_statement .)


state 15

    (20) statement -> try_catch_statement .

    RETURN          reduce using rule 20 (statement -> try_catch_statement .)
    VAR             reduce using rule 20 (statement -> try_catch_statement .)
    LET             reduce using rule 20 (statement -> try_catch_statement .)
    CONST           reduce using rule 20 (statement -> try_catch_statement .)
    ID              reduce using rule 20 (statement -> try_catch_statement .)
    FUNCTION        reduce using rule 20 (statement -> try_catch_statement .)
    IF              reduce using rule 20 (statement -> try_catch_statement .)
    WHILE           reduce using rule 20 (statement -> try_catch_statement .)
    FOR             reduce using rule 20 (statement -> try_catch_statement .)
    BREAK           reduce using rule 20 (statement -> try_catch_statement .)
    SWITCH          reduce using rule 20 (statement -> try_catch_statement .)
    TRY             reduce using rule 20 (statement -> try_catch_statement .)
    THROW           reduce using rule 20 (statement -> try_catch_statement .)
    LBRACKET        reduce using rule 20 (statement -> try_catch_statement .)
    CONSOLE         reduce using rule 20 (statement -> try_catch_statement .)
    NUMBER          reduce using rule 20 (statement -> try_catch_statement .)
    STRING          reduce using rule 20 (statement -> try_catch_statement .)
    LPAREN          reduce using rule 20 (statement -> try_catch_statement .)
    NOT             reduce using rule 20 (statement -> try_catch_statement .)
    TRUE            reduce using rule 20 (statement -> try_catch_statement .)
    FALSE           reduce using rule 20 (statement -> try_catch_statement .)
    LBRACE          reduce using rule 20 (statement -> try_catch_statement .)
    $end            reduce using rule 20 (statement -> try_catch_statement .)
    RBRACE          reduce using rule 20 (statement -> try_catch_statement .)
    error           reduce using rule 20 (statement -> try_catch_statement .)
    DEFAULT         reduce using rule 20 (statement -> try_catch_statement .)
    CASE            reduce using rule 20 (statement -> try_catch_statement .)


state 16

    (21) statement -> throw_statement .

    RETURN          reduce using rule 21 (statement -> throw_statement .)
    VAR             reduce using rule 21 (statement -> throw_statement .)
    LET             reduce using rule 21 (statement -> throw_statement .)
    CONST           reduce using rule 21 (statement -> throw_statement .)
    ID              reduce using rule 21 (statement -> throw_statement .)
    FUNCTION        reduce using rule 21 (statement -> throw_statement .)
    IF              reduce using rule 21 (statement -> throw_statement .)
    WHILE           reduce using rule 21 (statement -> throw_statement .)
    FOR             reduce using rule 21 (statement -> throw_statement .)
    BREAK           reduce using rule 21 (statement -> throw_statement .)
    SWITCH          reduce using rule 21 (statement -> throw_statement .)
    TRY             reduce using rule 21 (statement -> throw_statement .)
    THROW           reduce using rule 21 (statement -> throw_statement .)
    LBRACKET        reduce using rule 21 (statement -> throw_statement .)
    CONSOLE         reduce using rule 21 (statement -> throw_statement .)
    NUMBER          reduce using rule 21 (statement -> throw_statement .)
    STRING          reduce using rule 21 (statement -> throw_statement .)
    LPAREN          reduce using rule 21 (statement -> throw_statement .)
    NOT             reduce using rule 21 (statement -> throw_statement .)
    TRUE            reduce using rule 21 (statement -> throw_statement .)
    FALSE           reduce using rule 21 (statement -> throw_statement .)
    LBRACE          reduce using rule 21 (statement -> throw_statement .)
    $end            reduce using rule 21 (statement -> throw_statement .)
    RBRACE          reduce using rule 21 (statement -> throw_statement .)
    error           reduce using rule 21 (statement -> throw_statement .)
    DEFAULT         reduce using rule 21 (statement -> throw_statement .)
    CASE            reduce using rule 21 (statement -> throw_statement .)


state 17

    (26) statement -> RETURN . expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 65
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 18

    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RETURN          reduce using rule 35 (expression -> term .)
    VAR             reduce using rule 35 (expression -> term .)
    LET             reduce using rule 35 (expression -> term .)
    CONST           reduce using rule 35 (expression -> term .)
    ID              reduce using rule 35 (expression -> term .)
    FUNCTION        reduce using rule 35 (expression -> term .)
    IF              reduce using rule 35 (expression -> term .)
    WHILE           reduce using rule 35 (expression -> term .)
    FOR             reduce using rule 35 (expression -> term .)
    BREAK           reduce using rule 35 (expression -> term .)
    SWITCH          reduce using rule 35 (expression -> term .)
    TRY             reduce using rule 35 (expression -> term .)
    THROW           reduce using rule 35 (expression -> term .)
    LBRACKET        reduce using rule 35 (expression -> term .)
    CONSOLE         reduce using rule 35 (expression -> term .)
    NUMBER          reduce using rule 35 (expression -> term .)
    STRING          reduce using rule 35 (expression -> term .)
    LPAREN          reduce using rule 35 (expression -> term .)
    NOT             reduce using rule 35 (expression -> term .)
    TRUE            reduce using rule 35 (expression -> term .)
    FALSE           reduce using rule 35 (expression -> term .)
    LBRACE          reduce using rule 35 (expression -> term .)
    $end            reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    RBRACKET        reduce using rule 35 (expression -> term .)
    COMMA           reduce using rule 35 (expression -> term .)
    COLON           reduce using rule 35 (expression -> term .)
    RBRACE          reduce using rule 35 (expression -> term .)
    error           reduce using rule 35 (expression -> term .)
    DEFAULT         reduce using rule 35 (expression -> term .)
    CASE            reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 35 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> term .) ]


state 19

    (46) expression -> array_literal .

    SEMICOLON       reduce using rule 46 (expression -> array_literal .)
    QUESTION        reduce using rule 46 (expression -> array_literal .)
    PLUS            reduce using rule 46 (expression -> array_literal .)
    MINUS           reduce using rule 46 (expression -> array_literal .)
    GT              reduce using rule 46 (expression -> array_literal .)
    LT              reduce using rule 46 (expression -> array_literal .)
    GE              reduce using rule 46 (expression -> array_literal .)
    LE              reduce using rule 46 (expression -> array_literal .)
    EQUALS          reduce using rule 46 (expression -> array_literal .)
    NOTEQUALS       reduce using rule 46 (expression -> array_literal .)
    AND             reduce using rule 46 (expression -> array_literal .)
    OR              reduce using rule 46 (expression -> array_literal .)
    RETURN          reduce using rule 46 (expression -> array_literal .)
    VAR             reduce using rule 46 (expression -> array_literal .)
    LET             reduce using rule 46 (expression -> array_literal .)
    CONST           reduce using rule 46 (expression -> array_literal .)
    ID              reduce using rule 46 (expression -> array_literal .)
    FUNCTION        reduce using rule 46 (expression -> array_literal .)
    IF              reduce using rule 46 (expression -> array_literal .)
    WHILE           reduce using rule 46 (expression -> array_literal .)
    FOR             reduce using rule 46 (expression -> array_literal .)
    BREAK           reduce using rule 46 (expression -> array_literal .)
    SWITCH          reduce using rule 46 (expression -> array_literal .)
    TRY             reduce using rule 46 (expression -> array_literal .)
    THROW           reduce using rule 46 (expression -> array_literal .)
    LBRACKET        reduce using rule 46 (expression -> array_literal .)
    CONSOLE         reduce using rule 46 (expression -> array_literal .)
    NUMBER          reduce using rule 46 (expression -> array_literal .)
    STRING          reduce using rule 46 (expression -> array_literal .)
    LPAREN          reduce using rule 46 (expression -> array_literal .)
    NOT             reduce using rule 46 (expression -> array_literal .)
    TRUE            reduce using rule 46 (expression -> array_literal .)
    FALSE           reduce using rule 46 (expression -> array_literal .)
    LBRACE          reduce using rule 46 (expression -> array_literal .)
    $end            reduce using rule 46 (expression -> array_literal .)
    RPAREN          reduce using rule 46 (expression -> array_literal .)
    RBRACKET        reduce using rule 46 (expression -> array_literal .)
    COMMA           reduce using rule 46 (expression -> array_literal .)
    COLON           reduce using rule 46 (expression -> array_literal .)
    RBRACE          reduce using rule 46 (expression -> array_literal .)
    error           reduce using rule 46 (expression -> array_literal .)
    DEFAULT         reduce using rule 46 (expression -> array_literal .)
    CASE            reduce using rule 46 (expression -> array_literal .)
    TIMES           reduce using rule 46 (expression -> array_literal .)
    DIVIDE          reduce using rule 46 (expression -> array_literal .)


state 20

    (47) expression -> array_access .
    (57) factor -> array_access .

  ! reduce/reduce conflict for TIMES resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for QUESTION resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for PLUS resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for MINUS resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for GT resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LT resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for GE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for EQUALS resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for AND resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for OR resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for RETURN resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for VAR resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LET resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for CONST resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for ID resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for IF resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for WHILE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for BREAK resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for SWITCH resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for TRY resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for THROW resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for NUMBER resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for STRING resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LPAREN resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for NOT resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for TRUE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for FALSE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for LBRACE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for $end resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for RBRACE resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for error resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 47 (expression -> array_access .)
  ! reduce/reduce conflict for CASE resolved using rule 47 (expression -> array_access .)
    SEMICOLON       reduce using rule 47 (expression -> array_access .)
    QUESTION        reduce using rule 47 (expression -> array_access .)
    PLUS            reduce using rule 47 (expression -> array_access .)
    MINUS           reduce using rule 47 (expression -> array_access .)
    GT              reduce using rule 47 (expression -> array_access .)
    LT              reduce using rule 47 (expression -> array_access .)
    GE              reduce using rule 47 (expression -> array_access .)
    LE              reduce using rule 47 (expression -> array_access .)
    EQUALS          reduce using rule 47 (expression -> array_access .)
    NOTEQUALS       reduce using rule 47 (expression -> array_access .)
    AND             reduce using rule 47 (expression -> array_access .)
    OR              reduce using rule 47 (expression -> array_access .)
    RETURN          reduce using rule 47 (expression -> array_access .)
    VAR             reduce using rule 47 (expression -> array_access .)
    LET             reduce using rule 47 (expression -> array_access .)
    CONST           reduce using rule 47 (expression -> array_access .)
    ID              reduce using rule 47 (expression -> array_access .)
    FUNCTION        reduce using rule 47 (expression -> array_access .)
    IF              reduce using rule 47 (expression -> array_access .)
    WHILE           reduce using rule 47 (expression -> array_access .)
    FOR             reduce using rule 47 (expression -> array_access .)
    BREAK           reduce using rule 47 (expression -> array_access .)
    SWITCH          reduce using rule 47 (expression -> array_access .)
    TRY             reduce using rule 47 (expression -> array_access .)
    THROW           reduce using rule 47 (expression -> array_access .)
    LBRACKET        reduce using rule 47 (expression -> array_access .)
    CONSOLE         reduce using rule 47 (expression -> array_access .)
    NUMBER          reduce using rule 47 (expression -> array_access .)
    STRING          reduce using rule 47 (expression -> array_access .)
    LPAREN          reduce using rule 47 (expression -> array_access .)
    NOT             reduce using rule 47 (expression -> array_access .)
    TRUE            reduce using rule 47 (expression -> array_access .)
    FALSE           reduce using rule 47 (expression -> array_access .)
    LBRACE          reduce using rule 47 (expression -> array_access .)
    $end            reduce using rule 47 (expression -> array_access .)
    RPAREN          reduce using rule 47 (expression -> array_access .)
    RBRACKET        reduce using rule 47 (expression -> array_access .)
    COMMA           reduce using rule 47 (expression -> array_access .)
    COLON           reduce using rule 47 (expression -> array_access .)
    RBRACE          reduce using rule 47 (expression -> array_access .)
    error           reduce using rule 47 (expression -> array_access .)
    DEFAULT         reduce using rule 47 (expression -> array_access .)
    CASE            reduce using rule 47 (expression -> array_access .)
    TIMES           reduce using rule 47 (expression -> array_access .)
    DIVIDE          reduce using rule 47 (expression -> array_access .)

  ! TIMES           [ reduce using rule 57 (factor -> array_access .) ]
  ! DIVIDE          [ reduce using rule 57 (factor -> array_access .) ]
  ! SEMICOLON       [ reduce using rule 57 (factor -> array_access .) ]
  ! QUESTION        [ reduce using rule 57 (factor -> array_access .) ]
  ! PLUS            [ reduce using rule 57 (factor -> array_access .) ]
  ! MINUS           [ reduce using rule 57 (factor -> array_access .) ]
  ! GT              [ reduce using rule 57 (factor -> array_access .) ]
  ! LT              [ reduce using rule 57 (factor -> array_access .) ]
  ! GE              [ reduce using rule 57 (factor -> array_access .) ]
  ! LE              [ reduce using rule 57 (factor -> array_access .) ]
  ! EQUALS          [ reduce using rule 57 (factor -> array_access .) ]
  ! NOTEQUALS       [ reduce using rule 57 (factor -> array_access .) ]
  ! AND             [ reduce using rule 57 (factor -> array_access .) ]
  ! OR              [ reduce using rule 57 (factor -> array_access .) ]
  ! RETURN          [ reduce using rule 57 (factor -> array_access .) ]
  ! VAR             [ reduce using rule 57 (factor -> array_access .) ]
  ! LET             [ reduce using rule 57 (factor -> array_access .) ]
  ! CONST           [ reduce using rule 57 (factor -> array_access .) ]
  ! ID              [ reduce using rule 57 (factor -> array_access .) ]
  ! FUNCTION        [ reduce using rule 57 (factor -> array_access .) ]
  ! IF              [ reduce using rule 57 (factor -> array_access .) ]
  ! WHILE           [ reduce using rule 57 (factor -> array_access .) ]
  ! FOR             [ reduce using rule 57 (factor -> array_access .) ]
  ! BREAK           [ reduce using rule 57 (factor -> array_access .) ]
  ! SWITCH          [ reduce using rule 57 (factor -> array_access .) ]
  ! TRY             [ reduce using rule 57 (factor -> array_access .) ]
  ! THROW           [ reduce using rule 57 (factor -> array_access .) ]
  ! LBRACKET        [ reduce using rule 57 (factor -> array_access .) ]
  ! CONSOLE         [ reduce using rule 57 (factor -> array_access .) ]
  ! NUMBER          [ reduce using rule 57 (factor -> array_access .) ]
  ! STRING          [ reduce using rule 57 (factor -> array_access .) ]
  ! LPAREN          [ reduce using rule 57 (factor -> array_access .) ]
  ! NOT             [ reduce using rule 57 (factor -> array_access .) ]
  ! TRUE            [ reduce using rule 57 (factor -> array_access .) ]
  ! FALSE           [ reduce using rule 57 (factor -> array_access .) ]
  ! LBRACE          [ reduce using rule 57 (factor -> array_access .) ]
  ! $end            [ reduce using rule 57 (factor -> array_access .) ]
  ! RPAREN          [ reduce using rule 57 (factor -> array_access .) ]
  ! RBRACKET        [ reduce using rule 57 (factor -> array_access .) ]
  ! COMMA           [ reduce using rule 57 (factor -> array_access .) ]
  ! COLON           [ reduce using rule 57 (factor -> array_access .) ]
  ! RBRACE          [ reduce using rule 57 (factor -> array_access .) ]
  ! error           [ reduce using rule 57 (factor -> array_access .) ]
  ! DEFAULT         [ reduce using rule 57 (factor -> array_access .) ]
  ! CASE            [ reduce using rule 57 (factor -> array_access .) ]


state 21

    (27) declaration -> VAR . ID
    (30) declaration -> VAR . ID ASSIGN expression
    (117) declaration -> VAR . error

    ID              shift and go to state 71
    error           shift and go to state 72


state 22

    (33) assignment -> ID . ASSIGN expression
    (67) method_call -> ID . DOT ID LPAREN arguments RPAREN
    (85) array_access -> ID . LBRACKET expression RBRACKET
    (53) factor -> ID .
    (65) function_call -> ID . LPAREN arguments RPAREN
    (89) property_access -> ID . DOT ID

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 73
    DOT             shift and go to state 74
    LBRACKET        shift and go to state 76
    TIMES           reduce using rule 53 (factor -> ID .)
    DIVIDE          reduce using rule 53 (factor -> ID .)
    SEMICOLON       reduce using rule 53 (factor -> ID .)
    QUESTION        reduce using rule 53 (factor -> ID .)
    PLUS            reduce using rule 53 (factor -> ID .)
    MINUS           reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    EQUALS          reduce using rule 53 (factor -> ID .)
    NOTEQUALS       reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    RETURN          reduce using rule 53 (factor -> ID .)
    VAR             reduce using rule 53 (factor -> ID .)
    LET             reduce using rule 53 (factor -> ID .)
    CONST           reduce using rule 53 (factor -> ID .)
    ID              reduce using rule 53 (factor -> ID .)
    FUNCTION        reduce using rule 53 (factor -> ID .)
    IF              reduce using rule 53 (factor -> ID .)
    WHILE           reduce using rule 53 (factor -> ID .)
    FOR             reduce using rule 53 (factor -> ID .)
    BREAK           reduce using rule 53 (factor -> ID .)
    SWITCH          reduce using rule 53 (factor -> ID .)
    TRY             reduce using rule 53 (factor -> ID .)
    THROW           reduce using rule 53 (factor -> ID .)
    CONSOLE         reduce using rule 53 (factor -> ID .)
    NUMBER          reduce using rule 53 (factor -> ID .)
    STRING          reduce using rule 53 (factor -> ID .)
    NOT             reduce using rule 53 (factor -> ID .)
    TRUE            reduce using rule 53 (factor -> ID .)
    FALSE           reduce using rule 53 (factor -> ID .)
    LBRACE          reduce using rule 53 (factor -> ID .)
    $end            reduce using rule 53 (factor -> ID .)
    RBRACE          reduce using rule 53 (factor -> ID .)
    error           reduce using rule 53 (factor -> ID .)
    DEFAULT         reduce using rule 53 (factor -> ID .)
    CASE            reduce using rule 53 (factor -> ID .)
    LPAREN          shift and go to state 75

  ! LBRACKET        [ reduce using rule 53 (factor -> ID .) ]
  ! LPAREN          [ reduce using rule 53 (factor -> ID .) ]


state 23

    (28) declaration -> LET . ID
    (31) declaration -> LET . ID ASSIGN expression
    (118) declaration -> LET . error

    ID              shift and go to state 77
    error           shift and go to state 78


state 24

    (29) declaration -> CONST . ID
    (32) declaration -> CONST . ID ASSIGN expression
    (119) declaration -> CONST . error

    ID              shift and go to state 79
    error           shift and go to state 80


state 25

    (66) method_call -> console_log .

    SEMICOLON       reduce using rule 66 (method_call -> console_log .)
    RETURN          reduce using rule 66 (method_call -> console_log .)
    VAR             reduce using rule 66 (method_call -> console_log .)
    LET             reduce using rule 66 (method_call -> console_log .)
    CONST           reduce using rule 66 (method_call -> console_log .)
    ID              reduce using rule 66 (method_call -> console_log .)
    FUNCTION        reduce using rule 66 (method_call -> console_log .)
    IF              reduce using rule 66 (method_call -> console_log .)
    WHILE           reduce using rule 66 (method_call -> console_log .)
    FOR             reduce using rule 66 (method_call -> console_log .)
    BREAK           reduce using rule 66 (method_call -> console_log .)
    SWITCH          reduce using rule 66 (method_call -> console_log .)
    TRY             reduce using rule 66 (method_call -> console_log .)
    THROW           reduce using rule 66 (method_call -> console_log .)
    LBRACKET        reduce using rule 66 (method_call -> console_log .)
    CONSOLE         reduce using rule 66 (method_call -> console_log .)
    NUMBER          reduce using rule 66 (method_call -> console_log .)
    STRING          reduce using rule 66 (method_call -> console_log .)
    LPAREN          reduce using rule 66 (method_call -> console_log .)
    NOT             reduce using rule 66 (method_call -> console_log .)
    TRUE            reduce using rule 66 (method_call -> console_log .)
    FALSE           reduce using rule 66 (method_call -> console_log .)
    LBRACE          reduce using rule 66 (method_call -> console_log .)
    $end            reduce using rule 66 (method_call -> console_log .)
    TIMES           reduce using rule 66 (method_call -> console_log .)
    DIVIDE          reduce using rule 66 (method_call -> console_log .)
    QUESTION        reduce using rule 66 (method_call -> console_log .)
    PLUS            reduce using rule 66 (method_call -> console_log .)
    MINUS           reduce using rule 66 (method_call -> console_log .)
    GT              reduce using rule 66 (method_call -> console_log .)
    LT              reduce using rule 66 (method_call -> console_log .)
    GE              reduce using rule 66 (method_call -> console_log .)
    LE              reduce using rule 66 (method_call -> console_log .)
    EQUALS          reduce using rule 66 (method_call -> console_log .)
    NOTEQUALS       reduce using rule 66 (method_call -> console_log .)
    AND             reduce using rule 66 (method_call -> console_log .)
    OR              reduce using rule 66 (method_call -> console_log .)
    RPAREN          reduce using rule 66 (method_call -> console_log .)
    RBRACKET        reduce using rule 66 (method_call -> console_log .)
    COMMA           reduce using rule 66 (method_call -> console_log .)
    COLON           reduce using rule 66 (method_call -> console_log .)
    RBRACE          reduce using rule 66 (method_call -> console_log .)
    error           reduce using rule 66 (method_call -> console_log .)
    DEFAULT         reduce using rule 66 (method_call -> console_log .)
    CASE            reduce using rule 66 (method_call -> console_log .)


state 26

    (54) factor -> LPAREN . expression RPAREN
    (105) arrow_function -> LPAREN . parameter_list RPAREN ARROW expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (23) parameter_list -> .
    (24) parameter_list -> . ID
    (25) parameter_list -> . parameter_list COMMA ID
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    RPAREN          reduce using rule 23 (parameter_list -> .)
    COMMA           reduce using rule 23 (parameter_list -> .)
    ID              shift and go to state 83
    LBRACKET        shift and go to state 37
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 81
    parameter_list                 shift and go to state 82
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 27

    (22) function_declaration -> FUNCTION . ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> FUNCTION . ID LPAREN error RPAREN block
    (113) anonymous_function -> FUNCTION . LPAREN parameter_list RPAREN block

    ID              shift and go to state 84
    LPAREN          shift and go to state 85


state 28

    (72) if_statement -> IF . LPAREN condition RPAREN block
    (73) if_statement -> IF . LPAREN condition RPAREN block ELSE block
    (116) if_statement -> IF . error block
    (122) if_statement -> IF . LPAREN error block

    LPAREN          shift and go to state 86
    error           shift and go to state 87


state 29

    (86) while_statement -> WHILE . LPAREN condition RPAREN block

    LPAREN          shift and go to state 88


state 30

    (91) for_statement -> FOR . LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> FOR . error block

    LPAREN          shift and go to state 89
    error           shift and go to state 90


state 31

    (90) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 91


state 32

    (106) switch_statement -> SWITCH . LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> SWITCH . error block
    (126) switch_statement -> SWITCH . LPAREN error RPAREN LBRACE case_blocks default_block RBRACE

    LPAREN          shift and go to state 92
    error           shift and go to state 93


state 33

    (100) object_literal -> LBRACE . object_properties RBRACE
    (101) object_properties -> . object_property
    (102) object_properties -> . object_properties COMMA object_property
    (103) object_properties -> . empty
    (104) object_property -> . ID COLON expression
    (88) empty -> .

    ID              shift and go to state 97
    RBRACE          reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)

    object_properties              shift and go to state 94
    object_property                shift and go to state 95
    empty                          shift and go to state 96

state 34

    (114) try_catch_statement -> TRY . block CATCH LPAREN ID RPAREN block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 98

state 35

    (115) throw_statement -> THROW . expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 100
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 36

    (48) term -> factor .

    TIMES           reduce using rule 48 (term -> factor .)
    DIVIDE          reduce using rule 48 (term -> factor .)
    SEMICOLON       reduce using rule 48 (term -> factor .)
    QUESTION        reduce using rule 48 (term -> factor .)
    PLUS            reduce using rule 48 (term -> factor .)
    MINUS           reduce using rule 48 (term -> factor .)
    GT              reduce using rule 48 (term -> factor .)
    LT              reduce using rule 48 (term -> factor .)
    GE              reduce using rule 48 (term -> factor .)
    LE              reduce using rule 48 (term -> factor .)
    EQUALS          reduce using rule 48 (term -> factor .)
    NOTEQUALS       reduce using rule 48 (term -> factor .)
    AND             reduce using rule 48 (term -> factor .)
    OR              reduce using rule 48 (term -> factor .)
    RETURN          reduce using rule 48 (term -> factor .)
    VAR             reduce using rule 48 (term -> factor .)
    LET             reduce using rule 48 (term -> factor .)
    CONST           reduce using rule 48 (term -> factor .)
    ID              reduce using rule 48 (term -> factor .)
    FUNCTION        reduce using rule 48 (term -> factor .)
    IF              reduce using rule 48 (term -> factor .)
    WHILE           reduce using rule 48 (term -> factor .)
    FOR             reduce using rule 48 (term -> factor .)
    BREAK           reduce using rule 48 (term -> factor .)
    SWITCH          reduce using rule 48 (term -> factor .)
    TRY             reduce using rule 48 (term -> factor .)
    THROW           reduce using rule 48 (term -> factor .)
    LBRACKET        reduce using rule 48 (term -> factor .)
    CONSOLE         reduce using rule 48 (term -> factor .)
    NUMBER          reduce using rule 48 (term -> factor .)
    STRING          reduce using rule 48 (term -> factor .)
    LPAREN          reduce using rule 48 (term -> factor .)
    NOT             reduce using rule 48 (term -> factor .)
    TRUE            reduce using rule 48 (term -> factor .)
    FALSE           reduce using rule 48 (term -> factor .)
    LBRACE          reduce using rule 48 (term -> factor .)
    $end            reduce using rule 48 (term -> factor .)
    RPAREN          reduce using rule 48 (term -> factor .)
    RBRACKET        reduce using rule 48 (term -> factor .)
    COMMA           reduce using rule 48 (term -> factor .)
    COLON           reduce using rule 48 (term -> factor .)
    RBRACE          reduce using rule 48 (term -> factor .)
    error           reduce using rule 48 (term -> factor .)
    DEFAULT         reduce using rule 48 (term -> factor .)
    CASE            reduce using rule 48 (term -> factor .)


state 37

    (81) array_literal -> LBRACKET . array_elements RBRACKET
    (82) array_elements -> .
    (83) array_elements -> . expression
    (84) array_elements -> . array_elements COMMA expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    RBRACKET        reduce using rule 82 (array_elements -> .)
    COMMA           reduce using rule 82 (array_elements -> .)
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    array_elements                 shift and go to state 101
    expression                     shift and go to state 102
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 38

    (68) console_log -> CONSOLE . DOT LOG LPAREN arguments RPAREN

    DOT             shift and go to state 103


state 39

    (51) factor -> NUMBER .

    TIMES           reduce using rule 51 (factor -> NUMBER .)
    DIVIDE          reduce using rule 51 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 51 (factor -> NUMBER .)
    QUESTION        reduce using rule 51 (factor -> NUMBER .)
    PLUS            reduce using rule 51 (factor -> NUMBER .)
    MINUS           reduce using rule 51 (factor -> NUMBER .)
    GT              reduce using rule 51 (factor -> NUMBER .)
    LT              reduce using rule 51 (factor -> NUMBER .)
    GE              reduce using rule 51 (factor -> NUMBER .)
    LE              reduce using rule 51 (factor -> NUMBER .)
    EQUALS          reduce using rule 51 (factor -> NUMBER .)
    NOTEQUALS       reduce using rule 51 (factor -> NUMBER .)
    AND             reduce using rule 51 (factor -> NUMBER .)
    OR              reduce using rule 51 (factor -> NUMBER .)
    RETURN          reduce using rule 51 (factor -> NUMBER .)
    VAR             reduce using rule 51 (factor -> NUMBER .)
    LET             reduce using rule 51 (factor -> NUMBER .)
    CONST           reduce using rule 51 (factor -> NUMBER .)
    ID              reduce using rule 51 (factor -> NUMBER .)
    FUNCTION        reduce using rule 51 (factor -> NUMBER .)
    IF              reduce using rule 51 (factor -> NUMBER .)
    WHILE           reduce using rule 51 (factor -> NUMBER .)
    FOR             reduce using rule 51 (factor -> NUMBER .)
    BREAK           reduce using rule 51 (factor -> NUMBER .)
    SWITCH          reduce using rule 51 (factor -> NUMBER .)
    TRY             reduce using rule 51 (factor -> NUMBER .)
    THROW           reduce using rule 51 (factor -> NUMBER .)
    LBRACKET        reduce using rule 51 (factor -> NUMBER .)
    CONSOLE         reduce using rule 51 (factor -> NUMBER .)
    NUMBER          reduce using rule 51 (factor -> NUMBER .)
    STRING          reduce using rule 51 (factor -> NUMBER .)
    LPAREN          reduce using rule 51 (factor -> NUMBER .)
    NOT             reduce using rule 51 (factor -> NUMBER .)
    TRUE            reduce using rule 51 (factor -> NUMBER .)
    FALSE           reduce using rule 51 (factor -> NUMBER .)
    LBRACE          reduce using rule 51 (factor -> NUMBER .)
    $end            reduce using rule 51 (factor -> NUMBER .)
    RPAREN          reduce using rule 51 (factor -> NUMBER .)
    RBRACKET        reduce using rule 51 (factor -> NUMBER .)
    COMMA           reduce using rule 51 (factor -> NUMBER .)
    COLON           reduce using rule 51 (factor -> NUMBER .)
    RBRACE          reduce using rule 51 (factor -> NUMBER .)
    error           reduce using rule 51 (factor -> NUMBER .)
    DEFAULT         reduce using rule 51 (factor -> NUMBER .)
    CASE            reduce using rule 51 (factor -> NUMBER .)


state 40

    (52) factor -> STRING .

    TIMES           reduce using rule 52 (factor -> STRING .)
    DIVIDE          reduce using rule 52 (factor -> STRING .)
    SEMICOLON       reduce using rule 52 (factor -> STRING .)
    QUESTION        reduce using rule 52 (factor -> STRING .)
    PLUS            reduce using rule 52 (factor -> STRING .)
    MINUS           reduce using rule 52 (factor -> STRING .)
    GT              reduce using rule 52 (factor -> STRING .)
    LT              reduce using rule 52 (factor -> STRING .)
    GE              reduce using rule 52 (factor -> STRING .)
    LE              reduce using rule 52 (factor -> STRING .)
    EQUALS          reduce using rule 52 (factor -> STRING .)
    NOTEQUALS       reduce using rule 52 (factor -> STRING .)
    AND             reduce using rule 52 (factor -> STRING .)
    OR              reduce using rule 52 (factor -> STRING .)
    RETURN          reduce using rule 52 (factor -> STRING .)
    VAR             reduce using rule 52 (factor -> STRING .)
    LET             reduce using rule 52 (factor -> STRING .)
    CONST           reduce using rule 52 (factor -> STRING .)
    ID              reduce using rule 52 (factor -> STRING .)
    FUNCTION        reduce using rule 52 (factor -> STRING .)
    IF              reduce using rule 52 (factor -> STRING .)
    WHILE           reduce using rule 52 (factor -> STRING .)
    FOR             reduce using rule 52 (factor -> STRING .)
    BREAK           reduce using rule 52 (factor -> STRING .)
    SWITCH          reduce using rule 52 (factor -> STRING .)
    TRY             reduce using rule 52 (factor -> STRING .)
    THROW           reduce using rule 52 (factor -> STRING .)
    LBRACKET        reduce using rule 52 (factor -> STRING .)
    CONSOLE         reduce using rule 52 (factor -> STRING .)
    NUMBER          reduce using rule 52 (factor -> STRING .)
    STRING          reduce using rule 52 (factor -> STRING .)
    LPAREN          reduce using rule 52 (factor -> STRING .)
    NOT             reduce using rule 52 (factor -> STRING .)
    TRUE            reduce using rule 52 (factor -> STRING .)
    FALSE           reduce using rule 52 (factor -> STRING .)
    LBRACE          reduce using rule 52 (factor -> STRING .)
    $end            reduce using rule 52 (factor -> STRING .)
    RPAREN          reduce using rule 52 (factor -> STRING .)
    RBRACKET        reduce using rule 52 (factor -> STRING .)
    COMMA           reduce using rule 52 (factor -> STRING .)
    COLON           reduce using rule 52 (factor -> STRING .)
    RBRACE          reduce using rule 52 (factor -> STRING .)
    error           reduce using rule 52 (factor -> STRING .)
    DEFAULT         reduce using rule 52 (factor -> STRING .)
    CASE            reduce using rule 52 (factor -> STRING .)


state 41

    (56) factor -> function_call .

    TIMES           reduce using rule 56 (factor -> function_call .)
    DIVIDE          reduce using rule 56 (factor -> function_call .)
    SEMICOLON       reduce using rule 56 (factor -> function_call .)
    QUESTION        reduce using rule 56 (factor -> function_call .)
    PLUS            reduce using rule 56 (factor -> function_call .)
    MINUS           reduce using rule 56 (factor -> function_call .)
    GT              reduce using rule 56 (factor -> function_call .)
    LT              reduce using rule 56 (factor -> function_call .)
    GE              reduce using rule 56 (factor -> function_call .)
    LE              reduce using rule 56 (factor -> function_call .)
    EQUALS          reduce using rule 56 (factor -> function_call .)
    NOTEQUALS       reduce using rule 56 (factor -> function_call .)
    AND             reduce using rule 56 (factor -> function_call .)
    OR              reduce using rule 56 (factor -> function_call .)
    RETURN          reduce using rule 56 (factor -> function_call .)
    VAR             reduce using rule 56 (factor -> function_call .)
    LET             reduce using rule 56 (factor -> function_call .)
    CONST           reduce using rule 56 (factor -> function_call .)
    ID              reduce using rule 56 (factor -> function_call .)
    FUNCTION        reduce using rule 56 (factor -> function_call .)
    IF              reduce using rule 56 (factor -> function_call .)
    WHILE           reduce using rule 56 (factor -> function_call .)
    FOR             reduce using rule 56 (factor -> function_call .)
    BREAK           reduce using rule 56 (factor -> function_call .)
    SWITCH          reduce using rule 56 (factor -> function_call .)
    TRY             reduce using rule 56 (factor -> function_call .)
    THROW           reduce using rule 56 (factor -> function_call .)
    LBRACKET        reduce using rule 56 (factor -> function_call .)
    CONSOLE         reduce using rule 56 (factor -> function_call .)
    NUMBER          reduce using rule 56 (factor -> function_call .)
    STRING          reduce using rule 56 (factor -> function_call .)
    LPAREN          reduce using rule 56 (factor -> function_call .)
    NOT             reduce using rule 56 (factor -> function_call .)
    TRUE            reduce using rule 56 (factor -> function_call .)
    FALSE           reduce using rule 56 (factor -> function_call .)
    LBRACE          reduce using rule 56 (factor -> function_call .)
    $end            reduce using rule 56 (factor -> function_call .)
    RPAREN          reduce using rule 56 (factor -> function_call .)
    RBRACKET        reduce using rule 56 (factor -> function_call .)
    COMMA           reduce using rule 56 (factor -> function_call .)
    COLON           reduce using rule 56 (factor -> function_call .)
    RBRACE          reduce using rule 56 (factor -> function_call .)
    error           reduce using rule 56 (factor -> function_call .)
    DEFAULT         reduce using rule 56 (factor -> function_call .)
    CASE            reduce using rule 56 (factor -> function_call .)


state 42

    (58) factor -> property_access .

    TIMES           reduce using rule 58 (factor -> property_access .)
    DIVIDE          reduce using rule 58 (factor -> property_access .)
    SEMICOLON       reduce using rule 58 (factor -> property_access .)
    QUESTION        reduce using rule 58 (factor -> property_access .)
    PLUS            reduce using rule 58 (factor -> property_access .)
    MINUS           reduce using rule 58 (factor -> property_access .)
    GT              reduce using rule 58 (factor -> property_access .)
    LT              reduce using rule 58 (factor -> property_access .)
    GE              reduce using rule 58 (factor -> property_access .)
    LE              reduce using rule 58 (factor -> property_access .)
    EQUALS          reduce using rule 58 (factor -> property_access .)
    NOTEQUALS       reduce using rule 58 (factor -> property_access .)
    AND             reduce using rule 58 (factor -> property_access .)
    OR              reduce using rule 58 (factor -> property_access .)
    RETURN          reduce using rule 58 (factor -> property_access .)
    VAR             reduce using rule 58 (factor -> property_access .)
    LET             reduce using rule 58 (factor -> property_access .)
    CONST           reduce using rule 58 (factor -> property_access .)
    ID              reduce using rule 58 (factor -> property_access .)
    FUNCTION        reduce using rule 58 (factor -> property_access .)
    IF              reduce using rule 58 (factor -> property_access .)
    WHILE           reduce using rule 58 (factor -> property_access .)
    FOR             reduce using rule 58 (factor -> property_access .)
    BREAK           reduce using rule 58 (factor -> property_access .)
    SWITCH          reduce using rule 58 (factor -> property_access .)
    TRY             reduce using rule 58 (factor -> property_access .)
    THROW           reduce using rule 58 (factor -> property_access .)
    LBRACKET        reduce using rule 58 (factor -> property_access .)
    CONSOLE         reduce using rule 58 (factor -> property_access .)
    NUMBER          reduce using rule 58 (factor -> property_access .)
    STRING          reduce using rule 58 (factor -> property_access .)
    LPAREN          reduce using rule 58 (factor -> property_access .)
    NOT             reduce using rule 58 (factor -> property_access .)
    TRUE            reduce using rule 58 (factor -> property_access .)
    FALSE           reduce using rule 58 (factor -> property_access .)
    LBRACE          reduce using rule 58 (factor -> property_access .)
    $end            reduce using rule 58 (factor -> property_access .)
    RPAREN          reduce using rule 58 (factor -> property_access .)
    RBRACKET        reduce using rule 58 (factor -> property_access .)
    COMMA           reduce using rule 58 (factor -> property_access .)
    COLON           reduce using rule 58 (factor -> property_access .)
    RBRACE          reduce using rule 58 (factor -> property_access .)
    error           reduce using rule 58 (factor -> property_access .)
    DEFAULT         reduce using rule 58 (factor -> property_access .)
    CASE            reduce using rule 58 (factor -> property_access .)


state 43

    (59) factor -> NOT . factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    factor                         shift and go to state 104
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 44

    (60) factor -> object_literal .

    TIMES           reduce using rule 60 (factor -> object_literal .)
    DIVIDE          reduce using rule 60 (factor -> object_literal .)
    SEMICOLON       reduce using rule 60 (factor -> object_literal .)
    QUESTION        reduce using rule 60 (factor -> object_literal .)
    PLUS            reduce using rule 60 (factor -> object_literal .)
    MINUS           reduce using rule 60 (factor -> object_literal .)
    GT              reduce using rule 60 (factor -> object_literal .)
    LT              reduce using rule 60 (factor -> object_literal .)
    GE              reduce using rule 60 (factor -> object_literal .)
    LE              reduce using rule 60 (factor -> object_literal .)
    EQUALS          reduce using rule 60 (factor -> object_literal .)
    NOTEQUALS       reduce using rule 60 (factor -> object_literal .)
    AND             reduce using rule 60 (factor -> object_literal .)
    OR              reduce using rule 60 (factor -> object_literal .)
    RETURN          reduce using rule 60 (factor -> object_literal .)
    VAR             reduce using rule 60 (factor -> object_literal .)
    LET             reduce using rule 60 (factor -> object_literal .)
    CONST           reduce using rule 60 (factor -> object_literal .)
    ID              reduce using rule 60 (factor -> object_literal .)
    FUNCTION        reduce using rule 60 (factor -> object_literal .)
    IF              reduce using rule 60 (factor -> object_literal .)
    WHILE           reduce using rule 60 (factor -> object_literal .)
    FOR             reduce using rule 60 (factor -> object_literal .)
    BREAK           reduce using rule 60 (factor -> object_literal .)
    SWITCH          reduce using rule 60 (factor -> object_literal .)
    TRY             reduce using rule 60 (factor -> object_literal .)
    THROW           reduce using rule 60 (factor -> object_literal .)
    LBRACKET        reduce using rule 60 (factor -> object_literal .)
    CONSOLE         reduce using rule 60 (factor -> object_literal .)
    NUMBER          reduce using rule 60 (factor -> object_literal .)
    STRING          reduce using rule 60 (factor -> object_literal .)
    LPAREN          reduce using rule 60 (factor -> object_literal .)
    NOT             reduce using rule 60 (factor -> object_literal .)
    TRUE            reduce using rule 60 (factor -> object_literal .)
    FALSE           reduce using rule 60 (factor -> object_literal .)
    LBRACE          reduce using rule 60 (factor -> object_literal .)
    $end            reduce using rule 60 (factor -> object_literal .)
    RPAREN          reduce using rule 60 (factor -> object_literal .)
    RBRACKET        reduce using rule 60 (factor -> object_literal .)
    COMMA           reduce using rule 60 (factor -> object_literal .)
    COLON           reduce using rule 60 (factor -> object_literal .)
    RBRACE          reduce using rule 60 (factor -> object_literal .)
    error           reduce using rule 60 (factor -> object_literal .)
    DEFAULT         reduce using rule 60 (factor -> object_literal .)
    CASE            reduce using rule 60 (factor -> object_literal .)


state 45

    (61) factor -> arrow_function .

    TIMES           reduce using rule 61 (factor -> arrow_function .)
    DIVIDE          reduce using rule 61 (factor -> arrow_function .)
    SEMICOLON       reduce using rule 61 (factor -> arrow_function .)
    QUESTION        reduce using rule 61 (factor -> arrow_function .)
    PLUS            reduce using rule 61 (factor -> arrow_function .)
    MINUS           reduce using rule 61 (factor -> arrow_function .)
    GT              reduce using rule 61 (factor -> arrow_function .)
    LT              reduce using rule 61 (factor -> arrow_function .)
    GE              reduce using rule 61 (factor -> arrow_function .)
    LE              reduce using rule 61 (factor -> arrow_function .)
    EQUALS          reduce using rule 61 (factor -> arrow_function .)
    NOTEQUALS       reduce using rule 61 (factor -> arrow_function .)
    AND             reduce using rule 61 (factor -> arrow_function .)
    OR              reduce using rule 61 (factor -> arrow_function .)
    RETURN          reduce using rule 61 (factor -> arrow_function .)
    VAR             reduce using rule 61 (factor -> arrow_function .)
    LET             reduce using rule 61 (factor -> arrow_function .)
    CONST           reduce using rule 61 (factor -> arrow_function .)
    ID              reduce using rule 61 (factor -> arrow_function .)
    FUNCTION        reduce using rule 61 (factor -> arrow_function .)
    IF              reduce using rule 61 (factor -> arrow_function .)
    WHILE           reduce using rule 61 (factor -> arrow_function .)
    FOR             reduce using rule 61 (factor -> arrow_function .)
    BREAK           reduce using rule 61 (factor -> arrow_function .)
    SWITCH          reduce using rule 61 (factor -> arrow_function .)
    TRY             reduce using rule 61 (factor -> arrow_function .)
    THROW           reduce using rule 61 (factor -> arrow_function .)
    LBRACKET        reduce using rule 61 (factor -> arrow_function .)
    CONSOLE         reduce using rule 61 (factor -> arrow_function .)
    NUMBER          reduce using rule 61 (factor -> arrow_function .)
    STRING          reduce using rule 61 (factor -> arrow_function .)
    LPAREN          reduce using rule 61 (factor -> arrow_function .)
    NOT             reduce using rule 61 (factor -> arrow_function .)
    TRUE            reduce using rule 61 (factor -> arrow_function .)
    FALSE           reduce using rule 61 (factor -> arrow_function .)
    LBRACE          reduce using rule 61 (factor -> arrow_function .)
    $end            reduce using rule 61 (factor -> arrow_function .)
    RPAREN          reduce using rule 61 (factor -> arrow_function .)
    RBRACKET        reduce using rule 61 (factor -> arrow_function .)
    COMMA           reduce using rule 61 (factor -> arrow_function .)
    COLON           reduce using rule 61 (factor -> arrow_function .)
    RBRACE          reduce using rule 61 (factor -> arrow_function .)
    error           reduce using rule 61 (factor -> arrow_function .)
    DEFAULT         reduce using rule 61 (factor -> arrow_function .)
    CASE            reduce using rule 61 (factor -> arrow_function .)


state 46

    (62) factor -> anonymous_function .

    TIMES           reduce using rule 62 (factor -> anonymous_function .)
    DIVIDE          reduce using rule 62 (factor -> anonymous_function .)
    SEMICOLON       reduce using rule 62 (factor -> anonymous_function .)
    QUESTION        reduce using rule 62 (factor -> anonymous_function .)
    PLUS            reduce using rule 62 (factor -> anonymous_function .)
    MINUS           reduce using rule 62 (factor -> anonymous_function .)
    GT              reduce using rule 62 (factor -> anonymous_function .)
    LT              reduce using rule 62 (factor -> anonymous_function .)
    GE              reduce using rule 62 (factor -> anonymous_function .)
    LE              reduce using rule 62 (factor -> anonymous_function .)
    EQUALS          reduce using rule 62 (factor -> anonymous_function .)
    NOTEQUALS       reduce using rule 62 (factor -> anonymous_function .)
    AND             reduce using rule 62 (factor -> anonymous_function .)
    OR              reduce using rule 62 (factor -> anonymous_function .)
    RETURN          reduce using rule 62 (factor -> anonymous_function .)
    VAR             reduce using rule 62 (factor -> anonymous_function .)
    LET             reduce using rule 62 (factor -> anonymous_function .)
    CONST           reduce using rule 62 (factor -> anonymous_function .)
    ID              reduce using rule 62 (factor -> anonymous_function .)
    FUNCTION        reduce using rule 62 (factor -> anonymous_function .)
    IF              reduce using rule 62 (factor -> anonymous_function .)
    WHILE           reduce using rule 62 (factor -> anonymous_function .)
    FOR             reduce using rule 62 (factor -> anonymous_function .)
    BREAK           reduce using rule 62 (factor -> anonymous_function .)
    SWITCH          reduce using rule 62 (factor -> anonymous_function .)
    TRY             reduce using rule 62 (factor -> anonymous_function .)
    THROW           reduce using rule 62 (factor -> anonymous_function .)
    LBRACKET        reduce using rule 62 (factor -> anonymous_function .)
    CONSOLE         reduce using rule 62 (factor -> anonymous_function .)
    NUMBER          reduce using rule 62 (factor -> anonymous_function .)
    STRING          reduce using rule 62 (factor -> anonymous_function .)
    LPAREN          reduce using rule 62 (factor -> anonymous_function .)
    NOT             reduce using rule 62 (factor -> anonymous_function .)
    TRUE            reduce using rule 62 (factor -> anonymous_function .)
    FALSE           reduce using rule 62 (factor -> anonymous_function .)
    LBRACE          reduce using rule 62 (factor -> anonymous_function .)
    $end            reduce using rule 62 (factor -> anonymous_function .)
    RPAREN          reduce using rule 62 (factor -> anonymous_function .)
    RBRACKET        reduce using rule 62 (factor -> anonymous_function .)
    COMMA           reduce using rule 62 (factor -> anonymous_function .)
    COLON           reduce using rule 62 (factor -> anonymous_function .)
    RBRACE          reduce using rule 62 (factor -> anonymous_function .)
    error           reduce using rule 62 (factor -> anonymous_function .)
    DEFAULT         reduce using rule 62 (factor -> anonymous_function .)
    CASE            reduce using rule 62 (factor -> anonymous_function .)


state 47

    (63) factor -> TRUE .

    TIMES           reduce using rule 63 (factor -> TRUE .)
    DIVIDE          reduce using rule 63 (factor -> TRUE .)
    SEMICOLON       reduce using rule 63 (factor -> TRUE .)
    QUESTION        reduce using rule 63 (factor -> TRUE .)
    PLUS            reduce using rule 63 (factor -> TRUE .)
    MINUS           reduce using rule 63 (factor -> TRUE .)
    GT              reduce using rule 63 (factor -> TRUE .)
    LT              reduce using rule 63 (factor -> TRUE .)
    GE              reduce using rule 63 (factor -> TRUE .)
    LE              reduce using rule 63 (factor -> TRUE .)
    EQUALS          reduce using rule 63 (factor -> TRUE .)
    NOTEQUALS       reduce using rule 63 (factor -> TRUE .)
    AND             reduce using rule 63 (factor -> TRUE .)
    OR              reduce using rule 63 (factor -> TRUE .)
    RETURN          reduce using rule 63 (factor -> TRUE .)
    VAR             reduce using rule 63 (factor -> TRUE .)
    LET             reduce using rule 63 (factor -> TRUE .)
    CONST           reduce using rule 63 (factor -> TRUE .)
    ID              reduce using rule 63 (factor -> TRUE .)
    FUNCTION        reduce using rule 63 (factor -> TRUE .)
    IF              reduce using rule 63 (factor -> TRUE .)
    WHILE           reduce using rule 63 (factor -> TRUE .)
    FOR             reduce using rule 63 (factor -> TRUE .)
    BREAK           reduce using rule 63 (factor -> TRUE .)
    SWITCH          reduce using rule 63 (factor -> TRUE .)
    TRY             reduce using rule 63 (factor -> TRUE .)
    THROW           reduce using rule 63 (factor -> TRUE .)
    LBRACKET        reduce using rule 63 (factor -> TRUE .)
    CONSOLE         reduce using rule 63 (factor -> TRUE .)
    NUMBER          reduce using rule 63 (factor -> TRUE .)
    STRING          reduce using rule 63 (factor -> TRUE .)
    LPAREN          reduce using rule 63 (factor -> TRUE .)
    NOT             reduce using rule 63 (factor -> TRUE .)
    TRUE            reduce using rule 63 (factor -> TRUE .)
    FALSE           reduce using rule 63 (factor -> TRUE .)
    LBRACE          reduce using rule 63 (factor -> TRUE .)
    $end            reduce using rule 63 (factor -> TRUE .)
    RPAREN          reduce using rule 63 (factor -> TRUE .)
    RBRACKET        reduce using rule 63 (factor -> TRUE .)
    COMMA           reduce using rule 63 (factor -> TRUE .)
    COLON           reduce using rule 63 (factor -> TRUE .)
    RBRACE          reduce using rule 63 (factor -> TRUE .)
    error           reduce using rule 63 (factor -> TRUE .)
    DEFAULT         reduce using rule 63 (factor -> TRUE .)
    CASE            reduce using rule 63 (factor -> TRUE .)


state 48

    (64) factor -> FALSE .

    TIMES           reduce using rule 64 (factor -> FALSE .)
    DIVIDE          reduce using rule 64 (factor -> FALSE .)
    SEMICOLON       reduce using rule 64 (factor -> FALSE .)
    QUESTION        reduce using rule 64 (factor -> FALSE .)
    PLUS            reduce using rule 64 (factor -> FALSE .)
    MINUS           reduce using rule 64 (factor -> FALSE .)
    GT              reduce using rule 64 (factor -> FALSE .)
    LT              reduce using rule 64 (factor -> FALSE .)
    GE              reduce using rule 64 (factor -> FALSE .)
    LE              reduce using rule 64 (factor -> FALSE .)
    EQUALS          reduce using rule 64 (factor -> FALSE .)
    NOTEQUALS       reduce using rule 64 (factor -> FALSE .)
    AND             reduce using rule 64 (factor -> FALSE .)
    OR              reduce using rule 64 (factor -> FALSE .)
    RETURN          reduce using rule 64 (factor -> FALSE .)
    VAR             reduce using rule 64 (factor -> FALSE .)
    LET             reduce using rule 64 (factor -> FALSE .)
    CONST           reduce using rule 64 (factor -> FALSE .)
    ID              reduce using rule 64 (factor -> FALSE .)
    FUNCTION        reduce using rule 64 (factor -> FALSE .)
    IF              reduce using rule 64 (factor -> FALSE .)
    WHILE           reduce using rule 64 (factor -> FALSE .)
    FOR             reduce using rule 64 (factor -> FALSE .)
    BREAK           reduce using rule 64 (factor -> FALSE .)
    SWITCH          reduce using rule 64 (factor -> FALSE .)
    TRY             reduce using rule 64 (factor -> FALSE .)
    THROW           reduce using rule 64 (factor -> FALSE .)
    LBRACKET        reduce using rule 64 (factor -> FALSE .)
    CONSOLE         reduce using rule 64 (factor -> FALSE .)
    NUMBER          reduce using rule 64 (factor -> FALSE .)
    STRING          reduce using rule 64 (factor -> FALSE .)
    LPAREN          reduce using rule 64 (factor -> FALSE .)
    NOT             reduce using rule 64 (factor -> FALSE .)
    TRUE            reduce using rule 64 (factor -> FALSE .)
    FALSE           reduce using rule 64 (factor -> FALSE .)
    LBRACE          reduce using rule 64 (factor -> FALSE .)
    $end            reduce using rule 64 (factor -> FALSE .)
    RPAREN          reduce using rule 64 (factor -> FALSE .)
    RBRACKET        reduce using rule 64 (factor -> FALSE .)
    COMMA           reduce using rule 64 (factor -> FALSE .)
    COLON           reduce using rule 64 (factor -> FALSE .)
    RBRACE          reduce using rule 64 (factor -> FALSE .)
    error           reduce using rule 64 (factor -> FALSE .)
    DEFAULT         reduce using rule 64 (factor -> FALSE .)
    CASE            reduce using rule 64 (factor -> FALSE .)


state 49

    (4) statements -> statements statement .

    RETURN          reduce using rule 4 (statements -> statements statement .)
    VAR             reduce using rule 4 (statements -> statements statement .)
    LET             reduce using rule 4 (statements -> statements statement .)
    CONST           reduce using rule 4 (statements -> statements statement .)
    ID              reduce using rule 4 (statements -> statements statement .)
    FUNCTION        reduce using rule 4 (statements -> statements statement .)
    IF              reduce using rule 4 (statements -> statements statement .)
    WHILE           reduce using rule 4 (statements -> statements statement .)
    FOR             reduce using rule 4 (statements -> statements statement .)
    BREAK           reduce using rule 4 (statements -> statements statement .)
    SWITCH          reduce using rule 4 (statements -> statements statement .)
    TRY             reduce using rule 4 (statements -> statements statement .)
    THROW           reduce using rule 4 (statements -> statements statement .)
    LBRACKET        reduce using rule 4 (statements -> statements statement .)
    CONSOLE         reduce using rule 4 (statements -> statements statement .)
    NUMBER          reduce using rule 4 (statements -> statements statement .)
    STRING          reduce using rule 4 (statements -> statements statement .)
    LPAREN          reduce using rule 4 (statements -> statements statement .)
    NOT             reduce using rule 4 (statements -> statements statement .)
    TRUE            reduce using rule 4 (statements -> statements statement .)
    FALSE           reduce using rule 4 (statements -> statements statement .)
    LBRACE          reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    RBRACE          reduce using rule 4 (statements -> statements statement .)
    error           reduce using rule 4 (statements -> statements statement .)
    DEFAULT         reduce using rule 4 (statements -> statements statement .)
    CASE            reduce using rule 4 (statements -> statements statement .)


state 50

    (10) statement -> expression SEMICOLON .

    RETURN          reduce using rule 10 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 10 (statement -> expression SEMICOLON .)
    LET             reduce using rule 10 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 10 (statement -> expression SEMICOLON .)
    ID              reduce using rule 10 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> expression SEMICOLON .)
    IF              reduce using rule 10 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 10 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 10 (statement -> expression SEMICOLON .)
    TRY             reduce using rule 10 (statement -> expression SEMICOLON .)
    THROW           reduce using rule 10 (statement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 10 (statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 10 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 10 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 10 (statement -> expression SEMICOLON .)
    TRUE            reduce using rule 10 (statement -> expression SEMICOLON .)
    FALSE           reduce using rule 10 (statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 10 (statement -> expression SEMICOLON .)
    $end            reduce using rule 10 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> expression SEMICOLON .)
    error           reduce using rule 10 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 10 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 10 (statement -> expression SEMICOLON .)


state 51

    (34) expression -> expression QUESTION . expression COLON expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 107
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 52

    (36) expression -> expression PLUS . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 108
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 53

    (37) expression -> expression MINUS . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 109
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 54

    (38) expression -> expression GT . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 110
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 55

    (39) expression -> expression LT . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 111
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 56

    (40) expression -> expression GE . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 112
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 57

    (41) expression -> expression LE . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 113
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 58

    (42) expression -> expression EQUALS . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 114
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 59

    (43) expression -> expression NOTEQUALS . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 115
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 60

    (44) expression -> expression AND . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 116
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 61

    (45) expression -> expression OR . term
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    term                           shift and go to state 117
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 62

    (11) statement -> declaration SEMICOLON .

    RETURN          reduce using rule 11 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 11 (statement -> declaration SEMICOLON .)
    LET             reduce using rule 11 (statement -> declaration SEMICOLON .)
    CONST           reduce using rule 11 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 11 (statement -> declaration SEMICOLON .)
    FUNCTION        reduce using rule 11 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 11 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 11 (statement -> declaration SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> declaration SEMICOLON .)
    SWITCH          reduce using rule 11 (statement -> declaration SEMICOLON .)
    TRY             reduce using rule 11 (statement -> declaration SEMICOLON .)
    THROW           reduce using rule 11 (statement -> declaration SEMICOLON .)
    LBRACKET        reduce using rule 11 (statement -> declaration SEMICOLON .)
    CONSOLE         reduce using rule 11 (statement -> declaration SEMICOLON .)
    NUMBER          reduce using rule 11 (statement -> declaration SEMICOLON .)
    STRING          reduce using rule 11 (statement -> declaration SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> declaration SEMICOLON .)
    NOT             reduce using rule 11 (statement -> declaration SEMICOLON .)
    TRUE            reduce using rule 11 (statement -> declaration SEMICOLON .)
    FALSE           reduce using rule 11 (statement -> declaration SEMICOLON .)
    LBRACE          reduce using rule 11 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 11 (statement -> declaration SEMICOLON .)
    RBRACE          reduce using rule 11 (statement -> declaration SEMICOLON .)
    error           reduce using rule 11 (statement -> declaration SEMICOLON .)
    DEFAULT         reduce using rule 11 (statement -> declaration SEMICOLON .)
    CASE            reduce using rule 11 (statement -> declaration SEMICOLON .)


state 63

    (12) statement -> assignment SEMICOLON .

    RETURN          reduce using rule 12 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 12 (statement -> assignment SEMICOLON .)
    LET             reduce using rule 12 (statement -> assignment SEMICOLON .)
    CONST           reduce using rule 12 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 12 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 12 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 12 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 12 (statement -> assignment SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> assignment SEMICOLON .)
    SWITCH          reduce using rule 12 (statement -> assignment SEMICOLON .)
    TRY             reduce using rule 12 (statement -> assignment SEMICOLON .)
    THROW           reduce using rule 12 (statement -> assignment SEMICOLON .)
    LBRACKET        reduce using rule 12 (statement -> assignment SEMICOLON .)
    CONSOLE         reduce using rule 12 (statement -> assignment SEMICOLON .)
    NUMBER          reduce using rule 12 (statement -> assignment SEMICOLON .)
    STRING          reduce using rule 12 (statement -> assignment SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> assignment SEMICOLON .)
    NOT             reduce using rule 12 (statement -> assignment SEMICOLON .)
    TRUE            reduce using rule 12 (statement -> assignment SEMICOLON .)
    FALSE           reduce using rule 12 (statement -> assignment SEMICOLON .)
    LBRACE          reduce using rule 12 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 12 (statement -> assignment SEMICOLON .)
    RBRACE          reduce using rule 12 (statement -> assignment SEMICOLON .)
    error           reduce using rule 12 (statement -> assignment SEMICOLON .)
    DEFAULT         reduce using rule 12 (statement -> assignment SEMICOLON .)
    CASE            reduce using rule 12 (statement -> assignment SEMICOLON .)


state 64

    (13) statement -> method_call SEMICOLON .

    RETURN          reduce using rule 13 (statement -> method_call SEMICOLON .)
    VAR             reduce using rule 13 (statement -> method_call SEMICOLON .)
    LET             reduce using rule 13 (statement -> method_call SEMICOLON .)
    CONST           reduce using rule 13 (statement -> method_call SEMICOLON .)
    ID              reduce using rule 13 (statement -> method_call SEMICOLON .)
    FUNCTION        reduce using rule 13 (statement -> method_call SEMICOLON .)
    IF              reduce using rule 13 (statement -> method_call SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> method_call SEMICOLON .)
    FOR             reduce using rule 13 (statement -> method_call SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> method_call SEMICOLON .)
    SWITCH          reduce using rule 13 (statement -> method_call SEMICOLON .)
    TRY             reduce using rule 13 (statement -> method_call SEMICOLON .)
    THROW           reduce using rule 13 (statement -> method_call SEMICOLON .)
    LBRACKET        reduce using rule 13 (statement -> method_call SEMICOLON .)
    CONSOLE         reduce using rule 13 (statement -> method_call SEMICOLON .)
    NUMBER          reduce using rule 13 (statement -> method_call SEMICOLON .)
    STRING          reduce using rule 13 (statement -> method_call SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> method_call SEMICOLON .)
    NOT             reduce using rule 13 (statement -> method_call SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> method_call SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> method_call SEMICOLON .)
    LBRACE          reduce using rule 13 (statement -> method_call SEMICOLON .)
    $end            reduce using rule 13 (statement -> method_call SEMICOLON .)
    RBRACE          reduce using rule 13 (statement -> method_call SEMICOLON .)
    error           reduce using rule 13 (statement -> method_call SEMICOLON .)
    DEFAULT         reduce using rule 13 (statement -> method_call SEMICOLON .)
    CASE            reduce using rule 13 (statement -> method_call SEMICOLON .)


state 65

    (26) statement -> RETURN expression . SEMICOLON
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       shift and go to state 118
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 66

    (85) array_access -> ID . LBRACKET expression RBRACKET
    (53) factor -> ID .
    (67) method_call -> ID . DOT ID LPAREN arguments RPAREN
    (65) function_call -> ID . LPAREN arguments RPAREN
    (89) property_access -> ID . DOT ID

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        shift and go to state 76
    TIMES           reduce using rule 53 (factor -> ID .)
    DIVIDE          reduce using rule 53 (factor -> ID .)
    SEMICOLON       reduce using rule 53 (factor -> ID .)
    QUESTION        reduce using rule 53 (factor -> ID .)
    PLUS            reduce using rule 53 (factor -> ID .)
    MINUS           reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    EQUALS          reduce using rule 53 (factor -> ID .)
    NOTEQUALS       reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    RBRACKET        reduce using rule 53 (factor -> ID .)
    COMMA           reduce using rule 53 (factor -> ID .)
    COLON           reduce using rule 53 (factor -> ID .)
    RETURN          reduce using rule 53 (factor -> ID .)
    VAR             reduce using rule 53 (factor -> ID .)
    LET             reduce using rule 53 (factor -> ID .)
    CONST           reduce using rule 53 (factor -> ID .)
    ID              reduce using rule 53 (factor -> ID .)
    FUNCTION        reduce using rule 53 (factor -> ID .)
    IF              reduce using rule 53 (factor -> ID .)
    WHILE           reduce using rule 53 (factor -> ID .)
    FOR             reduce using rule 53 (factor -> ID .)
    BREAK           reduce using rule 53 (factor -> ID .)
    SWITCH          reduce using rule 53 (factor -> ID .)
    TRY             reduce using rule 53 (factor -> ID .)
    THROW           reduce using rule 53 (factor -> ID .)
    CONSOLE         reduce using rule 53 (factor -> ID .)
    NUMBER          reduce using rule 53 (factor -> ID .)
    STRING          reduce using rule 53 (factor -> ID .)
    NOT             reduce using rule 53 (factor -> ID .)
    TRUE            reduce using rule 53 (factor -> ID .)
    FALSE           reduce using rule 53 (factor -> ID .)
    LBRACE          reduce using rule 53 (factor -> ID .)
    $end            reduce using rule 53 (factor -> ID .)
    RBRACE          reduce using rule 53 (factor -> ID .)
    error           reduce using rule 53 (factor -> ID .)
    RPAREN          reduce using rule 53 (factor -> ID .)
    DEFAULT         reduce using rule 53 (factor -> ID .)
    CASE            reduce using rule 53 (factor -> ID .)
    DOT             shift and go to state 74
    LPAREN          shift and go to state 75

  ! LBRACKET        [ reduce using rule 53 (factor -> ID .) ]
  ! LPAREN          [ reduce using rule 53 (factor -> ID .) ]


state 67

    (55) factor -> method_call .

    TIMES           reduce using rule 55 (factor -> method_call .)
    DIVIDE          reduce using rule 55 (factor -> method_call .)
    SEMICOLON       reduce using rule 55 (factor -> method_call .)
    QUESTION        reduce using rule 55 (factor -> method_call .)
    PLUS            reduce using rule 55 (factor -> method_call .)
    MINUS           reduce using rule 55 (factor -> method_call .)
    GT              reduce using rule 55 (factor -> method_call .)
    LT              reduce using rule 55 (factor -> method_call .)
    GE              reduce using rule 55 (factor -> method_call .)
    LE              reduce using rule 55 (factor -> method_call .)
    EQUALS          reduce using rule 55 (factor -> method_call .)
    NOTEQUALS       reduce using rule 55 (factor -> method_call .)
    AND             reduce using rule 55 (factor -> method_call .)
    OR              reduce using rule 55 (factor -> method_call .)
    RPAREN          reduce using rule 55 (factor -> method_call .)
    RBRACKET        reduce using rule 55 (factor -> method_call .)
    COMMA           reduce using rule 55 (factor -> method_call .)
    RETURN          reduce using rule 55 (factor -> method_call .)
    VAR             reduce using rule 55 (factor -> method_call .)
    LET             reduce using rule 55 (factor -> method_call .)
    CONST           reduce using rule 55 (factor -> method_call .)
    ID              reduce using rule 55 (factor -> method_call .)
    FUNCTION        reduce using rule 55 (factor -> method_call .)
    IF              reduce using rule 55 (factor -> method_call .)
    WHILE           reduce using rule 55 (factor -> method_call .)
    FOR             reduce using rule 55 (factor -> method_call .)
    BREAK           reduce using rule 55 (factor -> method_call .)
    SWITCH          reduce using rule 55 (factor -> method_call .)
    TRY             reduce using rule 55 (factor -> method_call .)
    THROW           reduce using rule 55 (factor -> method_call .)
    LBRACKET        reduce using rule 55 (factor -> method_call .)
    CONSOLE         reduce using rule 55 (factor -> method_call .)
    NUMBER          reduce using rule 55 (factor -> method_call .)
    STRING          reduce using rule 55 (factor -> method_call .)
    LPAREN          reduce using rule 55 (factor -> method_call .)
    NOT             reduce using rule 55 (factor -> method_call .)
    TRUE            reduce using rule 55 (factor -> method_call .)
    FALSE           reduce using rule 55 (factor -> method_call .)
    LBRACE          reduce using rule 55 (factor -> method_call .)
    $end            reduce using rule 55 (factor -> method_call .)
    COLON           reduce using rule 55 (factor -> method_call .)
    RBRACE          reduce using rule 55 (factor -> method_call .)
    error           reduce using rule 55 (factor -> method_call .)
    DEFAULT         reduce using rule 55 (factor -> method_call .)
    CASE            reduce using rule 55 (factor -> method_call .)


state 68

    (113) anonymous_function -> FUNCTION . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 85


state 69

    (49) term -> term TIMES . factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    factor                         shift and go to state 119
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 70

    (50) term -> term DIVIDE . factor
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 105
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    factor                         shift and go to state 120
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    array_access                   shift and go to state 106
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 71

    (27) declaration -> VAR ID .
    (30) declaration -> VAR ID . ASSIGN expression

    SEMICOLON       reduce using rule 27 (declaration -> VAR ID .)
    RETURN          reduce using rule 27 (declaration -> VAR ID .)
    VAR             reduce using rule 27 (declaration -> VAR ID .)
    LET             reduce using rule 27 (declaration -> VAR ID .)
    CONST           reduce using rule 27 (declaration -> VAR ID .)
    ID              reduce using rule 27 (declaration -> VAR ID .)
    FUNCTION        reduce using rule 27 (declaration -> VAR ID .)
    IF              reduce using rule 27 (declaration -> VAR ID .)
    WHILE           reduce using rule 27 (declaration -> VAR ID .)
    FOR             reduce using rule 27 (declaration -> VAR ID .)
    BREAK           reduce using rule 27 (declaration -> VAR ID .)
    SWITCH          reduce using rule 27 (declaration -> VAR ID .)
    TRY             reduce using rule 27 (declaration -> VAR ID .)
    THROW           reduce using rule 27 (declaration -> VAR ID .)
    LBRACKET        reduce using rule 27 (declaration -> VAR ID .)
    CONSOLE         reduce using rule 27 (declaration -> VAR ID .)
    NUMBER          reduce using rule 27 (declaration -> VAR ID .)
    STRING          reduce using rule 27 (declaration -> VAR ID .)
    LPAREN          reduce using rule 27 (declaration -> VAR ID .)
    NOT             reduce using rule 27 (declaration -> VAR ID .)
    TRUE            reduce using rule 27 (declaration -> VAR ID .)
    FALSE           reduce using rule 27 (declaration -> VAR ID .)
    LBRACE          reduce using rule 27 (declaration -> VAR ID .)
    $end            reduce using rule 27 (declaration -> VAR ID .)
    RBRACE          reduce using rule 27 (declaration -> VAR ID .)
    error           reduce using rule 27 (declaration -> VAR ID .)
    DEFAULT         reduce using rule 27 (declaration -> VAR ID .)
    CASE            reduce using rule 27 (declaration -> VAR ID .)
    ASSIGN          shift and go to state 121


state 72

    (117) declaration -> VAR error .

    SEMICOLON       reduce using rule 117 (declaration -> VAR error .)
    RETURN          reduce using rule 117 (declaration -> VAR error .)
    VAR             reduce using rule 117 (declaration -> VAR error .)
    LET             reduce using rule 117 (declaration -> VAR error .)
    CONST           reduce using rule 117 (declaration -> VAR error .)
    ID              reduce using rule 117 (declaration -> VAR error .)
    FUNCTION        reduce using rule 117 (declaration -> VAR error .)
    IF              reduce using rule 117 (declaration -> VAR error .)
    WHILE           reduce using rule 117 (declaration -> VAR error .)
    FOR             reduce using rule 117 (declaration -> VAR error .)
    BREAK           reduce using rule 117 (declaration -> VAR error .)
    SWITCH          reduce using rule 117 (declaration -> VAR error .)
    TRY             reduce using rule 117 (declaration -> VAR error .)
    THROW           reduce using rule 117 (declaration -> VAR error .)
    LBRACKET        reduce using rule 117 (declaration -> VAR error .)
    CONSOLE         reduce using rule 117 (declaration -> VAR error .)
    NUMBER          reduce using rule 117 (declaration -> VAR error .)
    STRING          reduce using rule 117 (declaration -> VAR error .)
    LPAREN          reduce using rule 117 (declaration -> VAR error .)
    NOT             reduce using rule 117 (declaration -> VAR error .)
    TRUE            reduce using rule 117 (declaration -> VAR error .)
    FALSE           reduce using rule 117 (declaration -> VAR error .)
    LBRACE          reduce using rule 117 (declaration -> VAR error .)
    $end            reduce using rule 117 (declaration -> VAR error .)
    RBRACE          reduce using rule 117 (declaration -> VAR error .)
    error           reduce using rule 117 (declaration -> VAR error .)
    DEFAULT         reduce using rule 117 (declaration -> VAR error .)
    CASE            reduce using rule 117 (declaration -> VAR error .)


state 73

    (33) assignment -> ID ASSIGN . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 122
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 74

    (67) method_call -> ID DOT . ID LPAREN arguments RPAREN
    (89) property_access -> ID DOT . ID

    ID              shift and go to state 123


state 75

    (65) function_call -> ID LPAREN . arguments RPAREN
    (69) arguments -> .
    (70) arguments -> . expression
    (71) arguments -> . arguments COMMA expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    RPAREN          reduce using rule 69 (arguments -> .)
    COMMA           reduce using rule 69 (arguments -> .)
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    arguments                      shift and go to state 124
    expression                     shift and go to state 125
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 76

    (85) array_access -> ID LBRACKET . expression RBRACKET
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 126
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 77

    (28) declaration -> LET ID .
    (31) declaration -> LET ID . ASSIGN expression

    SEMICOLON       reduce using rule 28 (declaration -> LET ID .)
    RETURN          reduce using rule 28 (declaration -> LET ID .)
    VAR             reduce using rule 28 (declaration -> LET ID .)
    LET             reduce using rule 28 (declaration -> LET ID .)
    CONST           reduce using rule 28 (declaration -> LET ID .)
    ID              reduce using rule 28 (declaration -> LET ID .)
    FUNCTION        reduce using rule 28 (declaration -> LET ID .)
    IF              reduce using rule 28 (declaration -> LET ID .)
    WHILE           reduce using rule 28 (declaration -> LET ID .)
    FOR             reduce using rule 28 (declaration -> LET ID .)
    BREAK           reduce using rule 28 (declaration -> LET ID .)
    SWITCH          reduce using rule 28 (declaration -> LET ID .)
    TRY             reduce using rule 28 (declaration -> LET ID .)
    THROW           reduce using rule 28 (declaration -> LET ID .)
    LBRACKET        reduce using rule 28 (declaration -> LET ID .)
    CONSOLE         reduce using rule 28 (declaration -> LET ID .)
    NUMBER          reduce using rule 28 (declaration -> LET ID .)
    STRING          reduce using rule 28 (declaration -> LET ID .)
    LPAREN          reduce using rule 28 (declaration -> LET ID .)
    NOT             reduce using rule 28 (declaration -> LET ID .)
    TRUE            reduce using rule 28 (declaration -> LET ID .)
    FALSE           reduce using rule 28 (declaration -> LET ID .)
    LBRACE          reduce using rule 28 (declaration -> LET ID .)
    $end            reduce using rule 28 (declaration -> LET ID .)
    RBRACE          reduce using rule 28 (declaration -> LET ID .)
    error           reduce using rule 28 (declaration -> LET ID .)
    DEFAULT         reduce using rule 28 (declaration -> LET ID .)
    CASE            reduce using rule 28 (declaration -> LET ID .)
    ASSIGN          shift and go to state 127


state 78

    (118) declaration -> LET error .

    SEMICOLON       reduce using rule 118 (declaration -> LET error .)
    RETURN          reduce using rule 118 (declaration -> LET error .)
    VAR             reduce using rule 118 (declaration -> LET error .)
    LET             reduce using rule 118 (declaration -> LET error .)
    CONST           reduce using rule 118 (declaration -> LET error .)
    ID              reduce using rule 118 (declaration -> LET error .)
    FUNCTION        reduce using rule 118 (declaration -> LET error .)
    IF              reduce using rule 118 (declaration -> LET error .)
    WHILE           reduce using rule 118 (declaration -> LET error .)
    FOR             reduce using rule 118 (declaration -> LET error .)
    BREAK           reduce using rule 118 (declaration -> LET error .)
    SWITCH          reduce using rule 118 (declaration -> LET error .)
    TRY             reduce using rule 118 (declaration -> LET error .)
    THROW           reduce using rule 118 (declaration -> LET error .)
    LBRACKET        reduce using rule 118 (declaration -> LET error .)
    CONSOLE         reduce using rule 118 (declaration -> LET error .)
    NUMBER          reduce using rule 118 (declaration -> LET error .)
    STRING          reduce using rule 118 (declaration -> LET error .)
    LPAREN          reduce using rule 118 (declaration -> LET error .)
    NOT             reduce using rule 118 (declaration -> LET error .)
    TRUE            reduce using rule 118 (declaration -> LET error .)
    FALSE           reduce using rule 118 (declaration -> LET error .)
    LBRACE          reduce using rule 118 (declaration -> LET error .)
    $end            reduce using rule 118 (declaration -> LET error .)
    RBRACE          reduce using rule 118 (declaration -> LET error .)
    error           reduce using rule 118 (declaration -> LET error .)
    DEFAULT         reduce using rule 118 (declaration -> LET error .)
    CASE            reduce using rule 118 (declaration -> LET error .)


state 79

    (29) declaration -> CONST ID .
    (32) declaration -> CONST ID . ASSIGN expression

    SEMICOLON       reduce using rule 29 (declaration -> CONST ID .)
    RETURN          reduce using rule 29 (declaration -> CONST ID .)
    VAR             reduce using rule 29 (declaration -> CONST ID .)
    LET             reduce using rule 29 (declaration -> CONST ID .)
    CONST           reduce using rule 29 (declaration -> CONST ID .)
    ID              reduce using rule 29 (declaration -> CONST ID .)
    FUNCTION        reduce using rule 29 (declaration -> CONST ID .)
    IF              reduce using rule 29 (declaration -> CONST ID .)
    WHILE           reduce using rule 29 (declaration -> CONST ID .)
    FOR             reduce using rule 29 (declaration -> CONST ID .)
    BREAK           reduce using rule 29 (declaration -> CONST ID .)
    SWITCH          reduce using rule 29 (declaration -> CONST ID .)
    TRY             reduce using rule 29 (declaration -> CONST ID .)
    THROW           reduce using rule 29 (declaration -> CONST ID .)
    LBRACKET        reduce using rule 29 (declaration -> CONST ID .)
    CONSOLE         reduce using rule 29 (declaration -> CONST ID .)
    NUMBER          reduce using rule 29 (declaration -> CONST ID .)
    STRING          reduce using rule 29 (declaration -> CONST ID .)
    LPAREN          reduce using rule 29 (declaration -> CONST ID .)
    NOT             reduce using rule 29 (declaration -> CONST ID .)
    TRUE            reduce using rule 29 (declaration -> CONST ID .)
    FALSE           reduce using rule 29 (declaration -> CONST ID .)
    LBRACE          reduce using rule 29 (declaration -> CONST ID .)
    $end            reduce using rule 29 (declaration -> CONST ID .)
    RBRACE          reduce using rule 29 (declaration -> CONST ID .)
    error           reduce using rule 29 (declaration -> CONST ID .)
    DEFAULT         reduce using rule 29 (declaration -> CONST ID .)
    CASE            reduce using rule 29 (declaration -> CONST ID .)
    ASSIGN          shift and go to state 128


state 80

    (119) declaration -> CONST error .

    SEMICOLON       reduce using rule 119 (declaration -> CONST error .)
    RETURN          reduce using rule 119 (declaration -> CONST error .)
    VAR             reduce using rule 119 (declaration -> CONST error .)
    LET             reduce using rule 119 (declaration -> CONST error .)
    CONST           reduce using rule 119 (declaration -> CONST error .)
    ID              reduce using rule 119 (declaration -> CONST error .)
    FUNCTION        reduce using rule 119 (declaration -> CONST error .)
    IF              reduce using rule 119 (declaration -> CONST error .)
    WHILE           reduce using rule 119 (declaration -> CONST error .)
    FOR             reduce using rule 119 (declaration -> CONST error .)
    BREAK           reduce using rule 119 (declaration -> CONST error .)
    SWITCH          reduce using rule 119 (declaration -> CONST error .)
    TRY             reduce using rule 119 (declaration -> CONST error .)
    THROW           reduce using rule 119 (declaration -> CONST error .)
    LBRACKET        reduce using rule 119 (declaration -> CONST error .)
    CONSOLE         reduce using rule 119 (declaration -> CONST error .)
    NUMBER          reduce using rule 119 (declaration -> CONST error .)
    STRING          reduce using rule 119 (declaration -> CONST error .)
    LPAREN          reduce using rule 119 (declaration -> CONST error .)
    NOT             reduce using rule 119 (declaration -> CONST error .)
    TRUE            reduce using rule 119 (declaration -> CONST error .)
    FALSE           reduce using rule 119 (declaration -> CONST error .)
    LBRACE          reduce using rule 119 (declaration -> CONST error .)
    $end            reduce using rule 119 (declaration -> CONST error .)
    RBRACE          reduce using rule 119 (declaration -> CONST error .)
    error           reduce using rule 119 (declaration -> CONST error .)
    DEFAULT         reduce using rule 119 (declaration -> CONST error .)
    CASE            reduce using rule 119 (declaration -> CONST error .)


state 81

    (54) factor -> LPAREN expression . RPAREN
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          shift and go to state 129
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 82

    (105) arrow_function -> LPAREN parameter_list . RPAREN ARROW expression
    (25) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 131


state 83

    (24) parameter_list -> ID .
    (85) array_access -> ID . LBRACKET expression RBRACKET
    (53) factor -> ID .
    (67) method_call -> ID . DOT ID LPAREN arguments RPAREN
    (65) function_call -> ID . LPAREN arguments RPAREN
    (89) property_access -> ID . DOT ID

  ! reduce/reduce conflict for RPAREN resolved using rule 24 (parameter_list -> ID .)
    RPAREN          reduce using rule 24 (parameter_list -> ID .)
    COMMA           reduce using rule 24 (parameter_list -> ID .)
    LBRACKET        shift and go to state 76
    TIMES           reduce using rule 53 (factor -> ID .)
    DIVIDE          reduce using rule 53 (factor -> ID .)
    QUESTION        reduce using rule 53 (factor -> ID .)
    PLUS            reduce using rule 53 (factor -> ID .)
    MINUS           reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    EQUALS          reduce using rule 53 (factor -> ID .)
    NOTEQUALS       reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    DOT             shift and go to state 74
    LPAREN          shift and go to state 75

  ! RPAREN          [ reduce using rule 53 (factor -> ID .) ]


state 84

    (22) function_declaration -> FUNCTION ID . LPAREN parameter_list RPAREN block
    (124) function_declaration -> FUNCTION ID . LPAREN error RPAREN block

    LPAREN          shift and go to state 132


state 85

    (113) anonymous_function -> FUNCTION LPAREN . parameter_list RPAREN block
    (23) parameter_list -> .
    (24) parameter_list -> . ID
    (25) parameter_list -> . parameter_list COMMA ID

    RPAREN          reduce using rule 23 (parameter_list -> .)
    COMMA           reduce using rule 23 (parameter_list -> .)
    ID              shift and go to state 134

    parameter_list                 shift and go to state 133

state 86

    (72) if_statement -> IF LPAREN . condition RPAREN block
    (73) if_statement -> IF LPAREN . condition RPAREN block ELSE block
    (122) if_statement -> IF LPAREN . error block
    (74) condition -> . expression
    (75) condition -> . expression GT expression
    (76) condition -> . expression LT expression
    (77) condition -> . expression GE expression
    (78) condition -> . expression LE expression
    (79) condition -> . expression EQUALS expression
    (80) condition -> . expression NOTEQUALS expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    error           shift and go to state 136
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    condition                      shift and go to state 135
    expression                     shift and go to state 137
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 87

    (116) if_statement -> IF error . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 138

state 88

    (86) while_statement -> WHILE LPAREN . condition RPAREN block
    (74) condition -> . expression
    (75) condition -> . expression GT expression
    (76) condition -> . expression LT expression
    (77) condition -> . expression GE expression
    (78) condition -> . expression LE expression
    (79) condition -> . expression EQUALS expression
    (80) condition -> . expression NOTEQUALS expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    condition                      shift and go to state 139
    expression                     shift and go to state 137
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 89

    (91) for_statement -> FOR LPAREN . for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (92) for_init -> . declaration
    (93) for_init -> . assignment
    (94) for_init -> . empty
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (88) empty -> .

    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 144
    SEMICOLON       reduce using rule 88 (empty -> .)

    for_init                       shift and go to state 140
    declaration                    shift and go to state 141
    assignment                     shift and go to state 142
    empty                          shift and go to state 143

state 90

    (121) for_statement -> FOR error . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 145

state 91

    (90) break_statement -> BREAK SEMICOLON .

    RETURN          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    LET             reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    $end            reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    error           reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 90 (break_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 90 (break_statement -> BREAK SEMICOLON .)


state 92

    (106) switch_statement -> SWITCH LPAREN . expression RPAREN LBRACE case_blocks default_block RBRACE
    (126) switch_statement -> SWITCH LPAREN . error RPAREN LBRACE case_blocks default_block RBRACE
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    error           shift and go to state 147
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 146
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 93

    (120) switch_statement -> SWITCH error . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 148

state 94

    (100) object_literal -> LBRACE object_properties . RBRACE
    (102) object_properties -> object_properties . COMMA object_property

    RBRACE          shift and go to state 149
    COMMA           shift and go to state 150


state 95

    (101) object_properties -> object_property .

    RBRACE          reduce using rule 101 (object_properties -> object_property .)
    COMMA           reduce using rule 101 (object_properties -> object_property .)


state 96

    (103) object_properties -> empty .

    RBRACE          reduce using rule 103 (object_properties -> empty .)
    COMMA           reduce using rule 103 (object_properties -> empty .)


state 97

    (104) object_property -> ID . COLON expression

    COLON           shift and go to state 151


state 98

    (114) try_catch_statement -> TRY block . CATCH LPAREN ID RPAREN block

    CATCH           shift and go to state 152


state 99

    (87) block -> LBRACE . statements RBRACE
    (123) block -> LBRACE . statements error
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (88) empty -> .
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    RETURN          shift and go to state 17
    RBRACE          reduce using rule 88 (empty -> .)
    error           reduce using rule 88 (empty -> .)
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! VAR             [ reduce using rule 88 (empty -> .) ]
  ! LET             [ reduce using rule 88 (empty -> .) ]
  ! CONST           [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! WHILE           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! BREAK           [ reduce using rule 88 (empty -> .) ]
  ! SWITCH          [ reduce using rule 88 (empty -> .) ]
  ! TRY             [ reduce using rule 88 (empty -> .) ]
  ! THROW           [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 88 (empty -> .) ]
  ! NUMBER          [ reduce using rule 88 (empty -> .) ]
  ! STRING          [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! NOT             [ reduce using rule 88 (empty -> .) ]
  ! TRUE            [ reduce using rule 88 (empty -> .) ]
  ! FALSE           [ reduce using rule 88 (empty -> .) ]
  ! LBRACE          [ reduce using rule 88 (empty -> .) ]

    statements                     shift and go to state 153
    statement                      shift and go to state 4
    empty                          shift and go to state 154
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 100

    (115) throw_statement -> THROW expression . SEMICOLON
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       shift and go to state 155
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 101

    (81) array_literal -> LBRACKET array_elements . RBRACKET
    (84) array_elements -> array_elements . COMMA expression

    RBRACKET        shift and go to state 156
    COMMA           shift and go to state 157


state 102

    (83) array_elements -> expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RBRACKET        reduce using rule 83 (array_elements -> expression .)
    COMMA           reduce using rule 83 (array_elements -> expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 103

    (68) console_log -> CONSOLE DOT . LOG LPAREN arguments RPAREN

    LOG             shift and go to state 158


state 104

    (59) factor -> NOT factor .

    TIMES           reduce using rule 59 (factor -> NOT factor .)
    DIVIDE          reduce using rule 59 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 59 (factor -> NOT factor .)
    QUESTION        reduce using rule 59 (factor -> NOT factor .)
    PLUS            reduce using rule 59 (factor -> NOT factor .)
    MINUS           reduce using rule 59 (factor -> NOT factor .)
    GT              reduce using rule 59 (factor -> NOT factor .)
    LT              reduce using rule 59 (factor -> NOT factor .)
    GE              reduce using rule 59 (factor -> NOT factor .)
    LE              reduce using rule 59 (factor -> NOT factor .)
    EQUALS          reduce using rule 59 (factor -> NOT factor .)
    NOTEQUALS       reduce using rule 59 (factor -> NOT factor .)
    AND             reduce using rule 59 (factor -> NOT factor .)
    OR              reduce using rule 59 (factor -> NOT factor .)
    RETURN          reduce using rule 59 (factor -> NOT factor .)
    VAR             reduce using rule 59 (factor -> NOT factor .)
    LET             reduce using rule 59 (factor -> NOT factor .)
    CONST           reduce using rule 59 (factor -> NOT factor .)
    ID              reduce using rule 59 (factor -> NOT factor .)
    FUNCTION        reduce using rule 59 (factor -> NOT factor .)
    IF              reduce using rule 59 (factor -> NOT factor .)
    WHILE           reduce using rule 59 (factor -> NOT factor .)
    FOR             reduce using rule 59 (factor -> NOT factor .)
    BREAK           reduce using rule 59 (factor -> NOT factor .)
    SWITCH          reduce using rule 59 (factor -> NOT factor .)
    TRY             reduce using rule 59 (factor -> NOT factor .)
    THROW           reduce using rule 59 (factor -> NOT factor .)
    LBRACKET        reduce using rule 59 (factor -> NOT factor .)
    CONSOLE         reduce using rule 59 (factor -> NOT factor .)
    NUMBER          reduce using rule 59 (factor -> NOT factor .)
    STRING          reduce using rule 59 (factor -> NOT factor .)
    LPAREN          reduce using rule 59 (factor -> NOT factor .)
    NOT             reduce using rule 59 (factor -> NOT factor .)
    TRUE            reduce using rule 59 (factor -> NOT factor .)
    FALSE           reduce using rule 59 (factor -> NOT factor .)
    LBRACE          reduce using rule 59 (factor -> NOT factor .)
    $end            reduce using rule 59 (factor -> NOT factor .)
    RPAREN          reduce using rule 59 (factor -> NOT factor .)
    RBRACKET        reduce using rule 59 (factor -> NOT factor .)
    COMMA           reduce using rule 59 (factor -> NOT factor .)
    COLON           reduce using rule 59 (factor -> NOT factor .)
    RBRACE          reduce using rule 59 (factor -> NOT factor .)
    error           reduce using rule 59 (factor -> NOT factor .)
    DEFAULT         reduce using rule 59 (factor -> NOT factor .)
    CASE            reduce using rule 59 (factor -> NOT factor .)


state 105

    (53) factor -> ID .
    (67) method_call -> ID . DOT ID LPAREN arguments RPAREN
    (65) function_call -> ID . LPAREN arguments RPAREN
    (85) array_access -> ID . LBRACKET expression RBRACKET
    (89) property_access -> ID . DOT ID

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 53 (factor -> ID .)
    DIVIDE          reduce using rule 53 (factor -> ID .)
    SEMICOLON       reduce using rule 53 (factor -> ID .)
    QUESTION        reduce using rule 53 (factor -> ID .)
    PLUS            reduce using rule 53 (factor -> ID .)
    MINUS           reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    EQUALS          reduce using rule 53 (factor -> ID .)
    NOTEQUALS       reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    RETURN          reduce using rule 53 (factor -> ID .)
    VAR             reduce using rule 53 (factor -> ID .)
    LET             reduce using rule 53 (factor -> ID .)
    CONST           reduce using rule 53 (factor -> ID .)
    ID              reduce using rule 53 (factor -> ID .)
    FUNCTION        reduce using rule 53 (factor -> ID .)
    IF              reduce using rule 53 (factor -> ID .)
    WHILE           reduce using rule 53 (factor -> ID .)
    FOR             reduce using rule 53 (factor -> ID .)
    BREAK           reduce using rule 53 (factor -> ID .)
    SWITCH          reduce using rule 53 (factor -> ID .)
    TRY             reduce using rule 53 (factor -> ID .)
    THROW           reduce using rule 53 (factor -> ID .)
    CONSOLE         reduce using rule 53 (factor -> ID .)
    NUMBER          reduce using rule 53 (factor -> ID .)
    STRING          reduce using rule 53 (factor -> ID .)
    NOT             reduce using rule 53 (factor -> ID .)
    TRUE            reduce using rule 53 (factor -> ID .)
    FALSE           reduce using rule 53 (factor -> ID .)
    LBRACE          reduce using rule 53 (factor -> ID .)
    $end            reduce using rule 53 (factor -> ID .)
    RPAREN          reduce using rule 53 (factor -> ID .)
    RBRACKET        reduce using rule 53 (factor -> ID .)
    COMMA           reduce using rule 53 (factor -> ID .)
    COLON           reduce using rule 53 (factor -> ID .)
    RBRACE          reduce using rule 53 (factor -> ID .)
    error           reduce using rule 53 (factor -> ID .)
    DEFAULT         reduce using rule 53 (factor -> ID .)
    CASE            reduce using rule 53 (factor -> ID .)
    DOT             shift and go to state 74
    LPAREN          shift and go to state 75
    LBRACKET        shift and go to state 76

  ! LBRACKET        [ reduce using rule 53 (factor -> ID .) ]
  ! LPAREN          [ reduce using rule 53 (factor -> ID .) ]


state 106

    (57) factor -> array_access .

    TIMES           reduce using rule 57 (factor -> array_access .)
    DIVIDE          reduce using rule 57 (factor -> array_access .)
    SEMICOLON       reduce using rule 57 (factor -> array_access .)
    QUESTION        reduce using rule 57 (factor -> array_access .)
    PLUS            reduce using rule 57 (factor -> array_access .)
    MINUS           reduce using rule 57 (factor -> array_access .)
    GT              reduce using rule 57 (factor -> array_access .)
    LT              reduce using rule 57 (factor -> array_access .)
    GE              reduce using rule 57 (factor -> array_access .)
    LE              reduce using rule 57 (factor -> array_access .)
    EQUALS          reduce using rule 57 (factor -> array_access .)
    NOTEQUALS       reduce using rule 57 (factor -> array_access .)
    AND             reduce using rule 57 (factor -> array_access .)
    OR              reduce using rule 57 (factor -> array_access .)
    RETURN          reduce using rule 57 (factor -> array_access .)
    VAR             reduce using rule 57 (factor -> array_access .)
    LET             reduce using rule 57 (factor -> array_access .)
    CONST           reduce using rule 57 (factor -> array_access .)
    ID              reduce using rule 57 (factor -> array_access .)
    FUNCTION        reduce using rule 57 (factor -> array_access .)
    IF              reduce using rule 57 (factor -> array_access .)
    WHILE           reduce using rule 57 (factor -> array_access .)
    FOR             reduce using rule 57 (factor -> array_access .)
    BREAK           reduce using rule 57 (factor -> array_access .)
    SWITCH          reduce using rule 57 (factor -> array_access .)
    TRY             reduce using rule 57 (factor -> array_access .)
    THROW           reduce using rule 57 (factor -> array_access .)
    LBRACKET        reduce using rule 57 (factor -> array_access .)
    CONSOLE         reduce using rule 57 (factor -> array_access .)
    NUMBER          reduce using rule 57 (factor -> array_access .)
    STRING          reduce using rule 57 (factor -> array_access .)
    LPAREN          reduce using rule 57 (factor -> array_access .)
    NOT             reduce using rule 57 (factor -> array_access .)
    TRUE            reduce using rule 57 (factor -> array_access .)
    FALSE           reduce using rule 57 (factor -> array_access .)
    LBRACE          reduce using rule 57 (factor -> array_access .)
    $end            reduce using rule 57 (factor -> array_access .)
    RPAREN          reduce using rule 57 (factor -> array_access .)
    RBRACKET        reduce using rule 57 (factor -> array_access .)
    COMMA           reduce using rule 57 (factor -> array_access .)
    COLON           reduce using rule 57 (factor -> array_access .)
    RBRACE          reduce using rule 57 (factor -> array_access .)
    error           reduce using rule 57 (factor -> array_access .)
    DEFAULT         reduce using rule 57 (factor -> array_access .)
    CASE            reduce using rule 57 (factor -> array_access .)


state 107

    (34) expression -> expression QUESTION expression . COLON expression
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    COLON           shift and go to state 159
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 108

    (36) expression -> expression PLUS term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 36 (expression -> expression PLUS term .)
    QUESTION        reduce using rule 36 (expression -> expression PLUS term .)
    PLUS            reduce using rule 36 (expression -> expression PLUS term .)
    MINUS           reduce using rule 36 (expression -> expression PLUS term .)
    GT              reduce using rule 36 (expression -> expression PLUS term .)
    LT              reduce using rule 36 (expression -> expression PLUS term .)
    GE              reduce using rule 36 (expression -> expression PLUS term .)
    LE              reduce using rule 36 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 36 (expression -> expression PLUS term .)
    NOTEQUALS       reduce using rule 36 (expression -> expression PLUS term .)
    AND             reduce using rule 36 (expression -> expression PLUS term .)
    OR              reduce using rule 36 (expression -> expression PLUS term .)
    RETURN          reduce using rule 36 (expression -> expression PLUS term .)
    VAR             reduce using rule 36 (expression -> expression PLUS term .)
    LET             reduce using rule 36 (expression -> expression PLUS term .)
    CONST           reduce using rule 36 (expression -> expression PLUS term .)
    ID              reduce using rule 36 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 36 (expression -> expression PLUS term .)
    IF              reduce using rule 36 (expression -> expression PLUS term .)
    WHILE           reduce using rule 36 (expression -> expression PLUS term .)
    FOR             reduce using rule 36 (expression -> expression PLUS term .)
    BREAK           reduce using rule 36 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 36 (expression -> expression PLUS term .)
    TRY             reduce using rule 36 (expression -> expression PLUS term .)
    THROW           reduce using rule 36 (expression -> expression PLUS term .)
    LBRACKET        reduce using rule 36 (expression -> expression PLUS term .)
    CONSOLE         reduce using rule 36 (expression -> expression PLUS term .)
    NUMBER          reduce using rule 36 (expression -> expression PLUS term .)
    STRING          reduce using rule 36 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 36 (expression -> expression PLUS term .)
    NOT             reduce using rule 36 (expression -> expression PLUS term .)
    TRUE            reduce using rule 36 (expression -> expression PLUS term .)
    FALSE           reduce using rule 36 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 36 (expression -> expression PLUS term .)
    $end            reduce using rule 36 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 36 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 36 (expression -> expression PLUS term .)
    COMMA           reduce using rule 36 (expression -> expression PLUS term .)
    COLON           reduce using rule 36 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 36 (expression -> expression PLUS term .)
    error           reduce using rule 36 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 36 (expression -> expression PLUS term .)
    CASE            reduce using rule 36 (expression -> expression PLUS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 36 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression PLUS term .) ]


state 109

    (37) expression -> expression MINUS term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression MINUS term .)
    QUESTION        reduce using rule 37 (expression -> expression MINUS term .)
    PLUS            reduce using rule 37 (expression -> expression MINUS term .)
    MINUS           reduce using rule 37 (expression -> expression MINUS term .)
    GT              reduce using rule 37 (expression -> expression MINUS term .)
    LT              reduce using rule 37 (expression -> expression MINUS term .)
    GE              reduce using rule 37 (expression -> expression MINUS term .)
    LE              reduce using rule 37 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 37 (expression -> expression MINUS term .)
    NOTEQUALS       reduce using rule 37 (expression -> expression MINUS term .)
    AND             reduce using rule 37 (expression -> expression MINUS term .)
    OR              reduce using rule 37 (expression -> expression MINUS term .)
    RETURN          reduce using rule 37 (expression -> expression MINUS term .)
    VAR             reduce using rule 37 (expression -> expression MINUS term .)
    LET             reduce using rule 37 (expression -> expression MINUS term .)
    CONST           reduce using rule 37 (expression -> expression MINUS term .)
    ID              reduce using rule 37 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 37 (expression -> expression MINUS term .)
    IF              reduce using rule 37 (expression -> expression MINUS term .)
    WHILE           reduce using rule 37 (expression -> expression MINUS term .)
    FOR             reduce using rule 37 (expression -> expression MINUS term .)
    BREAK           reduce using rule 37 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 37 (expression -> expression MINUS term .)
    TRY             reduce using rule 37 (expression -> expression MINUS term .)
    THROW           reduce using rule 37 (expression -> expression MINUS term .)
    LBRACKET        reduce using rule 37 (expression -> expression MINUS term .)
    CONSOLE         reduce using rule 37 (expression -> expression MINUS term .)
    NUMBER          reduce using rule 37 (expression -> expression MINUS term .)
    STRING          reduce using rule 37 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 37 (expression -> expression MINUS term .)
    NOT             reduce using rule 37 (expression -> expression MINUS term .)
    TRUE            reduce using rule 37 (expression -> expression MINUS term .)
    FALSE           reduce using rule 37 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 37 (expression -> expression MINUS term .)
    $end            reduce using rule 37 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 37 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 37 (expression -> expression MINUS term .)
    COMMA           reduce using rule 37 (expression -> expression MINUS term .)
    COLON           reduce using rule 37 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 37 (expression -> expression MINUS term .)
    error           reduce using rule 37 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 37 (expression -> expression MINUS term .)
    CASE            reduce using rule 37 (expression -> expression MINUS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 37 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MINUS term .) ]


state 110

    (38) expression -> expression GT term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression GT term .)
    QUESTION        reduce using rule 38 (expression -> expression GT term .)
    PLUS            reduce using rule 38 (expression -> expression GT term .)
    MINUS           reduce using rule 38 (expression -> expression GT term .)
    GT              reduce using rule 38 (expression -> expression GT term .)
    LT              reduce using rule 38 (expression -> expression GT term .)
    GE              reduce using rule 38 (expression -> expression GT term .)
    LE              reduce using rule 38 (expression -> expression GT term .)
    EQUALS          reduce using rule 38 (expression -> expression GT term .)
    NOTEQUALS       reduce using rule 38 (expression -> expression GT term .)
    AND             reduce using rule 38 (expression -> expression GT term .)
    OR              reduce using rule 38 (expression -> expression GT term .)
    RETURN          reduce using rule 38 (expression -> expression GT term .)
    VAR             reduce using rule 38 (expression -> expression GT term .)
    LET             reduce using rule 38 (expression -> expression GT term .)
    CONST           reduce using rule 38 (expression -> expression GT term .)
    ID              reduce using rule 38 (expression -> expression GT term .)
    FUNCTION        reduce using rule 38 (expression -> expression GT term .)
    IF              reduce using rule 38 (expression -> expression GT term .)
    WHILE           reduce using rule 38 (expression -> expression GT term .)
    FOR             reduce using rule 38 (expression -> expression GT term .)
    BREAK           reduce using rule 38 (expression -> expression GT term .)
    SWITCH          reduce using rule 38 (expression -> expression GT term .)
    TRY             reduce using rule 38 (expression -> expression GT term .)
    THROW           reduce using rule 38 (expression -> expression GT term .)
    LBRACKET        reduce using rule 38 (expression -> expression GT term .)
    CONSOLE         reduce using rule 38 (expression -> expression GT term .)
    NUMBER          reduce using rule 38 (expression -> expression GT term .)
    STRING          reduce using rule 38 (expression -> expression GT term .)
    LPAREN          reduce using rule 38 (expression -> expression GT term .)
    NOT             reduce using rule 38 (expression -> expression GT term .)
    TRUE            reduce using rule 38 (expression -> expression GT term .)
    FALSE           reduce using rule 38 (expression -> expression GT term .)
    LBRACE          reduce using rule 38 (expression -> expression GT term .)
    $end            reduce using rule 38 (expression -> expression GT term .)
    RPAREN          reduce using rule 38 (expression -> expression GT term .)
    RBRACKET        reduce using rule 38 (expression -> expression GT term .)
    COMMA           reduce using rule 38 (expression -> expression GT term .)
    COLON           reduce using rule 38 (expression -> expression GT term .)
    RBRACE          reduce using rule 38 (expression -> expression GT term .)
    error           reduce using rule 38 (expression -> expression GT term .)
    DEFAULT         reduce using rule 38 (expression -> expression GT term .)
    CASE            reduce using rule 38 (expression -> expression GT term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 38 (expression -> expression GT term .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression GT term .) ]


state 111

    (39) expression -> expression LT term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 39 (expression -> expression LT term .)
    QUESTION        reduce using rule 39 (expression -> expression LT term .)
    PLUS            reduce using rule 39 (expression -> expression LT term .)
    MINUS           reduce using rule 39 (expression -> expression LT term .)
    GT              reduce using rule 39 (expression -> expression LT term .)
    LT              reduce using rule 39 (expression -> expression LT term .)
    GE              reduce using rule 39 (expression -> expression LT term .)
    LE              reduce using rule 39 (expression -> expression LT term .)
    EQUALS          reduce using rule 39 (expression -> expression LT term .)
    NOTEQUALS       reduce using rule 39 (expression -> expression LT term .)
    AND             reduce using rule 39 (expression -> expression LT term .)
    OR              reduce using rule 39 (expression -> expression LT term .)
    RETURN          reduce using rule 39 (expression -> expression LT term .)
    VAR             reduce using rule 39 (expression -> expression LT term .)
    LET             reduce using rule 39 (expression -> expression LT term .)
    CONST           reduce using rule 39 (expression -> expression LT term .)
    ID              reduce using rule 39 (expression -> expression LT term .)
    FUNCTION        reduce using rule 39 (expression -> expression LT term .)
    IF              reduce using rule 39 (expression -> expression LT term .)
    WHILE           reduce using rule 39 (expression -> expression LT term .)
    FOR             reduce using rule 39 (expression -> expression LT term .)
    BREAK           reduce using rule 39 (expression -> expression LT term .)
    SWITCH          reduce using rule 39 (expression -> expression LT term .)
    TRY             reduce using rule 39 (expression -> expression LT term .)
    THROW           reduce using rule 39 (expression -> expression LT term .)
    LBRACKET        reduce using rule 39 (expression -> expression LT term .)
    CONSOLE         reduce using rule 39 (expression -> expression LT term .)
    NUMBER          reduce using rule 39 (expression -> expression LT term .)
    STRING          reduce using rule 39 (expression -> expression LT term .)
    LPAREN          reduce using rule 39 (expression -> expression LT term .)
    NOT             reduce using rule 39 (expression -> expression LT term .)
    TRUE            reduce using rule 39 (expression -> expression LT term .)
    FALSE           reduce using rule 39 (expression -> expression LT term .)
    LBRACE          reduce using rule 39 (expression -> expression LT term .)
    $end            reduce using rule 39 (expression -> expression LT term .)
    RPAREN          reduce using rule 39 (expression -> expression LT term .)
    RBRACKET        reduce using rule 39 (expression -> expression LT term .)
    COMMA           reduce using rule 39 (expression -> expression LT term .)
    COLON           reduce using rule 39 (expression -> expression LT term .)
    RBRACE          reduce using rule 39 (expression -> expression LT term .)
    error           reduce using rule 39 (expression -> expression LT term .)
    DEFAULT         reduce using rule 39 (expression -> expression LT term .)
    CASE            reduce using rule 39 (expression -> expression LT term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 39 (expression -> expression LT term .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LT term .) ]


state 112

    (40) expression -> expression GE term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 40 (expression -> expression GE term .)
    QUESTION        reduce using rule 40 (expression -> expression GE term .)
    PLUS            reduce using rule 40 (expression -> expression GE term .)
    MINUS           reduce using rule 40 (expression -> expression GE term .)
    GT              reduce using rule 40 (expression -> expression GE term .)
    LT              reduce using rule 40 (expression -> expression GE term .)
    GE              reduce using rule 40 (expression -> expression GE term .)
    LE              reduce using rule 40 (expression -> expression GE term .)
    EQUALS          reduce using rule 40 (expression -> expression GE term .)
    NOTEQUALS       reduce using rule 40 (expression -> expression GE term .)
    AND             reduce using rule 40 (expression -> expression GE term .)
    OR              reduce using rule 40 (expression -> expression GE term .)
    RETURN          reduce using rule 40 (expression -> expression GE term .)
    VAR             reduce using rule 40 (expression -> expression GE term .)
    LET             reduce using rule 40 (expression -> expression GE term .)
    CONST           reduce using rule 40 (expression -> expression GE term .)
    ID              reduce using rule 40 (expression -> expression GE term .)
    FUNCTION        reduce using rule 40 (expression -> expression GE term .)
    IF              reduce using rule 40 (expression -> expression GE term .)
    WHILE           reduce using rule 40 (expression -> expression GE term .)
    FOR             reduce using rule 40 (expression -> expression GE term .)
    BREAK           reduce using rule 40 (expression -> expression GE term .)
    SWITCH          reduce using rule 40 (expression -> expression GE term .)
    TRY             reduce using rule 40 (expression -> expression GE term .)
    THROW           reduce using rule 40 (expression -> expression GE term .)
    LBRACKET        reduce using rule 40 (expression -> expression GE term .)
    CONSOLE         reduce using rule 40 (expression -> expression GE term .)
    NUMBER          reduce using rule 40 (expression -> expression GE term .)
    STRING          reduce using rule 40 (expression -> expression GE term .)
    LPAREN          reduce using rule 40 (expression -> expression GE term .)
    NOT             reduce using rule 40 (expression -> expression GE term .)
    TRUE            reduce using rule 40 (expression -> expression GE term .)
    FALSE           reduce using rule 40 (expression -> expression GE term .)
    LBRACE          reduce using rule 40 (expression -> expression GE term .)
    $end            reduce using rule 40 (expression -> expression GE term .)
    RPAREN          reduce using rule 40 (expression -> expression GE term .)
    RBRACKET        reduce using rule 40 (expression -> expression GE term .)
    COMMA           reduce using rule 40 (expression -> expression GE term .)
    COLON           reduce using rule 40 (expression -> expression GE term .)
    RBRACE          reduce using rule 40 (expression -> expression GE term .)
    error           reduce using rule 40 (expression -> expression GE term .)
    DEFAULT         reduce using rule 40 (expression -> expression GE term .)
    CASE            reduce using rule 40 (expression -> expression GE term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 40 (expression -> expression GE term .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression GE term .) ]


state 113

    (41) expression -> expression LE term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 41 (expression -> expression LE term .)
    QUESTION        reduce using rule 41 (expression -> expression LE term .)
    PLUS            reduce using rule 41 (expression -> expression LE term .)
    MINUS           reduce using rule 41 (expression -> expression LE term .)
    GT              reduce using rule 41 (expression -> expression LE term .)
    LT              reduce using rule 41 (expression -> expression LE term .)
    GE              reduce using rule 41 (expression -> expression LE term .)
    LE              reduce using rule 41 (expression -> expression LE term .)
    EQUALS          reduce using rule 41 (expression -> expression LE term .)
    NOTEQUALS       reduce using rule 41 (expression -> expression LE term .)
    AND             reduce using rule 41 (expression -> expression LE term .)
    OR              reduce using rule 41 (expression -> expression LE term .)
    RETURN          reduce using rule 41 (expression -> expression LE term .)
    VAR             reduce using rule 41 (expression -> expression LE term .)
    LET             reduce using rule 41 (expression -> expression LE term .)
    CONST           reduce using rule 41 (expression -> expression LE term .)
    ID              reduce using rule 41 (expression -> expression LE term .)
    FUNCTION        reduce using rule 41 (expression -> expression LE term .)
    IF              reduce using rule 41 (expression -> expression LE term .)
    WHILE           reduce using rule 41 (expression -> expression LE term .)
    FOR             reduce using rule 41 (expression -> expression LE term .)
    BREAK           reduce using rule 41 (expression -> expression LE term .)
    SWITCH          reduce using rule 41 (expression -> expression LE term .)
    TRY             reduce using rule 41 (expression -> expression LE term .)
    THROW           reduce using rule 41 (expression -> expression LE term .)
    LBRACKET        reduce using rule 41 (expression -> expression LE term .)
    CONSOLE         reduce using rule 41 (expression -> expression LE term .)
    NUMBER          reduce using rule 41 (expression -> expression LE term .)
    STRING          reduce using rule 41 (expression -> expression LE term .)
    LPAREN          reduce using rule 41 (expression -> expression LE term .)
    NOT             reduce using rule 41 (expression -> expression LE term .)
    TRUE            reduce using rule 41 (expression -> expression LE term .)
    FALSE           reduce using rule 41 (expression -> expression LE term .)
    LBRACE          reduce using rule 41 (expression -> expression LE term .)
    $end            reduce using rule 41 (expression -> expression LE term .)
    RPAREN          reduce using rule 41 (expression -> expression LE term .)
    RBRACKET        reduce using rule 41 (expression -> expression LE term .)
    COMMA           reduce using rule 41 (expression -> expression LE term .)
    COLON           reduce using rule 41 (expression -> expression LE term .)
    RBRACE          reduce using rule 41 (expression -> expression LE term .)
    error           reduce using rule 41 (expression -> expression LE term .)
    DEFAULT         reduce using rule 41 (expression -> expression LE term .)
    CASE            reduce using rule 41 (expression -> expression LE term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 41 (expression -> expression LE term .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression LE term .) ]


state 114

    (42) expression -> expression EQUALS term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 42 (expression -> expression EQUALS term .)
    QUESTION        reduce using rule 42 (expression -> expression EQUALS term .)
    PLUS            reduce using rule 42 (expression -> expression EQUALS term .)
    MINUS           reduce using rule 42 (expression -> expression EQUALS term .)
    GT              reduce using rule 42 (expression -> expression EQUALS term .)
    LT              reduce using rule 42 (expression -> expression EQUALS term .)
    GE              reduce using rule 42 (expression -> expression EQUALS term .)
    LE              reduce using rule 42 (expression -> expression EQUALS term .)
    EQUALS          reduce using rule 42 (expression -> expression EQUALS term .)
    NOTEQUALS       reduce using rule 42 (expression -> expression EQUALS term .)
    AND             reduce using rule 42 (expression -> expression EQUALS term .)
    OR              reduce using rule 42 (expression -> expression EQUALS term .)
    RETURN          reduce using rule 42 (expression -> expression EQUALS term .)
    VAR             reduce using rule 42 (expression -> expression EQUALS term .)
    LET             reduce using rule 42 (expression -> expression EQUALS term .)
    CONST           reduce using rule 42 (expression -> expression EQUALS term .)
    ID              reduce using rule 42 (expression -> expression EQUALS term .)
    FUNCTION        reduce using rule 42 (expression -> expression EQUALS term .)
    IF              reduce using rule 42 (expression -> expression EQUALS term .)
    WHILE           reduce using rule 42 (expression -> expression EQUALS term .)
    FOR             reduce using rule 42 (expression -> expression EQUALS term .)
    BREAK           reduce using rule 42 (expression -> expression EQUALS term .)
    SWITCH          reduce using rule 42 (expression -> expression EQUALS term .)
    TRY             reduce using rule 42 (expression -> expression EQUALS term .)
    THROW           reduce using rule 42 (expression -> expression EQUALS term .)
    LBRACKET        reduce using rule 42 (expression -> expression EQUALS term .)
    CONSOLE         reduce using rule 42 (expression -> expression EQUALS term .)
    NUMBER          reduce using rule 42 (expression -> expression EQUALS term .)
    STRING          reduce using rule 42 (expression -> expression EQUALS term .)
    LPAREN          reduce using rule 42 (expression -> expression EQUALS term .)
    NOT             reduce using rule 42 (expression -> expression EQUALS term .)
    TRUE            reduce using rule 42 (expression -> expression EQUALS term .)
    FALSE           reduce using rule 42 (expression -> expression EQUALS term .)
    LBRACE          reduce using rule 42 (expression -> expression EQUALS term .)
    $end            reduce using rule 42 (expression -> expression EQUALS term .)
    RPAREN          reduce using rule 42 (expression -> expression EQUALS term .)
    RBRACKET        reduce using rule 42 (expression -> expression EQUALS term .)
    COMMA           reduce using rule 42 (expression -> expression EQUALS term .)
    COLON           reduce using rule 42 (expression -> expression EQUALS term .)
    RBRACE          reduce using rule 42 (expression -> expression EQUALS term .)
    error           reduce using rule 42 (expression -> expression EQUALS term .)
    DEFAULT         reduce using rule 42 (expression -> expression EQUALS term .)
    CASE            reduce using rule 42 (expression -> expression EQUALS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression EQUALS term .) ]


state 115

    (43) expression -> expression NOTEQUALS term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 43 (expression -> expression NOTEQUALS term .)
    QUESTION        reduce using rule 43 (expression -> expression NOTEQUALS term .)
    PLUS            reduce using rule 43 (expression -> expression NOTEQUALS term .)
    MINUS           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    GT              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LT              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    GE              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LE              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    EQUALS          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    NOTEQUALS       reduce using rule 43 (expression -> expression NOTEQUALS term .)
    AND             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    OR              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    RETURN          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    VAR             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LET             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    CONST           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    ID              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    FUNCTION        reduce using rule 43 (expression -> expression NOTEQUALS term .)
    IF              reduce using rule 43 (expression -> expression NOTEQUALS term .)
    WHILE           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    FOR             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    BREAK           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    SWITCH          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    TRY             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    THROW           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LBRACKET        reduce using rule 43 (expression -> expression NOTEQUALS term .)
    CONSOLE         reduce using rule 43 (expression -> expression NOTEQUALS term .)
    NUMBER          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    STRING          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LPAREN          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    NOT             reduce using rule 43 (expression -> expression NOTEQUALS term .)
    TRUE            reduce using rule 43 (expression -> expression NOTEQUALS term .)
    FALSE           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    LBRACE          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    $end            reduce using rule 43 (expression -> expression NOTEQUALS term .)
    RPAREN          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    RBRACKET        reduce using rule 43 (expression -> expression NOTEQUALS term .)
    COMMA           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    COLON           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    RBRACE          reduce using rule 43 (expression -> expression NOTEQUALS term .)
    error           reduce using rule 43 (expression -> expression NOTEQUALS term .)
    DEFAULT         reduce using rule 43 (expression -> expression NOTEQUALS term .)
    CASE            reduce using rule 43 (expression -> expression NOTEQUALS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]


state 116

    (44) expression -> expression AND term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> expression AND term .)
    QUESTION        reduce using rule 44 (expression -> expression AND term .)
    PLUS            reduce using rule 44 (expression -> expression AND term .)
    MINUS           reduce using rule 44 (expression -> expression AND term .)
    GT              reduce using rule 44 (expression -> expression AND term .)
    LT              reduce using rule 44 (expression -> expression AND term .)
    GE              reduce using rule 44 (expression -> expression AND term .)
    LE              reduce using rule 44 (expression -> expression AND term .)
    EQUALS          reduce using rule 44 (expression -> expression AND term .)
    NOTEQUALS       reduce using rule 44 (expression -> expression AND term .)
    AND             reduce using rule 44 (expression -> expression AND term .)
    OR              reduce using rule 44 (expression -> expression AND term .)
    RETURN          reduce using rule 44 (expression -> expression AND term .)
    VAR             reduce using rule 44 (expression -> expression AND term .)
    LET             reduce using rule 44 (expression -> expression AND term .)
    CONST           reduce using rule 44 (expression -> expression AND term .)
    ID              reduce using rule 44 (expression -> expression AND term .)
    FUNCTION        reduce using rule 44 (expression -> expression AND term .)
    IF              reduce using rule 44 (expression -> expression AND term .)
    WHILE           reduce using rule 44 (expression -> expression AND term .)
    FOR             reduce using rule 44 (expression -> expression AND term .)
    BREAK           reduce using rule 44 (expression -> expression AND term .)
    SWITCH          reduce using rule 44 (expression -> expression AND term .)
    TRY             reduce using rule 44 (expression -> expression AND term .)
    THROW           reduce using rule 44 (expression -> expression AND term .)
    LBRACKET        reduce using rule 44 (expression -> expression AND term .)
    CONSOLE         reduce using rule 44 (expression -> expression AND term .)
    NUMBER          reduce using rule 44 (expression -> expression AND term .)
    STRING          reduce using rule 44 (expression -> expression AND term .)
    LPAREN          reduce using rule 44 (expression -> expression AND term .)
    NOT             reduce using rule 44 (expression -> expression AND term .)
    TRUE            reduce using rule 44 (expression -> expression AND term .)
    FALSE           reduce using rule 44 (expression -> expression AND term .)
    LBRACE          reduce using rule 44 (expression -> expression AND term .)
    $end            reduce using rule 44 (expression -> expression AND term .)
    RPAREN          reduce using rule 44 (expression -> expression AND term .)
    RBRACKET        reduce using rule 44 (expression -> expression AND term .)
    COMMA           reduce using rule 44 (expression -> expression AND term .)
    COLON           reduce using rule 44 (expression -> expression AND term .)
    RBRACE          reduce using rule 44 (expression -> expression AND term .)
    error           reduce using rule 44 (expression -> expression AND term .)
    DEFAULT         reduce using rule 44 (expression -> expression AND term .)
    CASE            reduce using rule 44 (expression -> expression AND term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 44 (expression -> expression AND term .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression AND term .) ]


state 117

    (45) expression -> expression OR term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 45 (expression -> expression OR term .)
    QUESTION        reduce using rule 45 (expression -> expression OR term .)
    PLUS            reduce using rule 45 (expression -> expression OR term .)
    MINUS           reduce using rule 45 (expression -> expression OR term .)
    GT              reduce using rule 45 (expression -> expression OR term .)
    LT              reduce using rule 45 (expression -> expression OR term .)
    GE              reduce using rule 45 (expression -> expression OR term .)
    LE              reduce using rule 45 (expression -> expression OR term .)
    EQUALS          reduce using rule 45 (expression -> expression OR term .)
    NOTEQUALS       reduce using rule 45 (expression -> expression OR term .)
    AND             reduce using rule 45 (expression -> expression OR term .)
    OR              reduce using rule 45 (expression -> expression OR term .)
    RETURN          reduce using rule 45 (expression -> expression OR term .)
    VAR             reduce using rule 45 (expression -> expression OR term .)
    LET             reduce using rule 45 (expression -> expression OR term .)
    CONST           reduce using rule 45 (expression -> expression OR term .)
    ID              reduce using rule 45 (expression -> expression OR term .)
    FUNCTION        reduce using rule 45 (expression -> expression OR term .)
    IF              reduce using rule 45 (expression -> expression OR term .)
    WHILE           reduce using rule 45 (expression -> expression OR term .)
    FOR             reduce using rule 45 (expression -> expression OR term .)
    BREAK           reduce using rule 45 (expression -> expression OR term .)
    SWITCH          reduce using rule 45 (expression -> expression OR term .)
    TRY             reduce using rule 45 (expression -> expression OR term .)
    THROW           reduce using rule 45 (expression -> expression OR term .)
    LBRACKET        reduce using rule 45 (expression -> expression OR term .)
    CONSOLE         reduce using rule 45 (expression -> expression OR term .)
    NUMBER          reduce using rule 45 (expression -> expression OR term .)
    STRING          reduce using rule 45 (expression -> expression OR term .)
    LPAREN          reduce using rule 45 (expression -> expression OR term .)
    NOT             reduce using rule 45 (expression -> expression OR term .)
    TRUE            reduce using rule 45 (expression -> expression OR term .)
    FALSE           reduce using rule 45 (expression -> expression OR term .)
    LBRACE          reduce using rule 45 (expression -> expression OR term .)
    $end            reduce using rule 45 (expression -> expression OR term .)
    RPAREN          reduce using rule 45 (expression -> expression OR term .)
    RBRACKET        reduce using rule 45 (expression -> expression OR term .)
    COMMA           reduce using rule 45 (expression -> expression OR term .)
    COLON           reduce using rule 45 (expression -> expression OR term .)
    RBRACE          reduce using rule 45 (expression -> expression OR term .)
    error           reduce using rule 45 (expression -> expression OR term .)
    DEFAULT         reduce using rule 45 (expression -> expression OR term .)
    CASE            reduce using rule 45 (expression -> expression OR term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! TIMES           [ reduce using rule 45 (expression -> expression OR term .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression OR term .) ]


state 118

    (26) statement -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    LET             reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    error           reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 26 (statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 26 (statement -> RETURN expression SEMICOLON .)


state 119

    (49) term -> term TIMES factor .

    TIMES           reduce using rule 49 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 49 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 49 (term -> term TIMES factor .)
    QUESTION        reduce using rule 49 (term -> term TIMES factor .)
    PLUS            reduce using rule 49 (term -> term TIMES factor .)
    MINUS           reduce using rule 49 (term -> term TIMES factor .)
    GT              reduce using rule 49 (term -> term TIMES factor .)
    LT              reduce using rule 49 (term -> term TIMES factor .)
    GE              reduce using rule 49 (term -> term TIMES factor .)
    LE              reduce using rule 49 (term -> term TIMES factor .)
    EQUALS          reduce using rule 49 (term -> term TIMES factor .)
    NOTEQUALS       reduce using rule 49 (term -> term TIMES factor .)
    AND             reduce using rule 49 (term -> term TIMES factor .)
    OR              reduce using rule 49 (term -> term TIMES factor .)
    RETURN          reduce using rule 49 (term -> term TIMES factor .)
    VAR             reduce using rule 49 (term -> term TIMES factor .)
    LET             reduce using rule 49 (term -> term TIMES factor .)
    CONST           reduce using rule 49 (term -> term TIMES factor .)
    ID              reduce using rule 49 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 49 (term -> term TIMES factor .)
    IF              reduce using rule 49 (term -> term TIMES factor .)
    WHILE           reduce using rule 49 (term -> term TIMES factor .)
    FOR             reduce using rule 49 (term -> term TIMES factor .)
    BREAK           reduce using rule 49 (term -> term TIMES factor .)
    SWITCH          reduce using rule 49 (term -> term TIMES factor .)
    TRY             reduce using rule 49 (term -> term TIMES factor .)
    THROW           reduce using rule 49 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 49 (term -> term TIMES factor .)
    CONSOLE         reduce using rule 49 (term -> term TIMES factor .)
    NUMBER          reduce using rule 49 (term -> term TIMES factor .)
    STRING          reduce using rule 49 (term -> term TIMES factor .)
    LPAREN          reduce using rule 49 (term -> term TIMES factor .)
    NOT             reduce using rule 49 (term -> term TIMES factor .)
    TRUE            reduce using rule 49 (term -> term TIMES factor .)
    FALSE           reduce using rule 49 (term -> term TIMES factor .)
    LBRACE          reduce using rule 49 (term -> term TIMES factor .)
    $end            reduce using rule 49 (term -> term TIMES factor .)
    RPAREN          reduce using rule 49 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 49 (term -> term TIMES factor .)
    COMMA           reduce using rule 49 (term -> term TIMES factor .)
    COLON           reduce using rule 49 (term -> term TIMES factor .)
    RBRACE          reduce using rule 49 (term -> term TIMES factor .)
    error           reduce using rule 49 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 49 (term -> term TIMES factor .)
    CASE            reduce using rule 49 (term -> term TIMES factor .)


state 120

    (50) term -> term DIVIDE factor .

    TIMES           reduce using rule 50 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 50 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 50 (term -> term DIVIDE factor .)
    QUESTION        reduce using rule 50 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 50 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 50 (term -> term DIVIDE factor .)
    GT              reduce using rule 50 (term -> term DIVIDE factor .)
    LT              reduce using rule 50 (term -> term DIVIDE factor .)
    GE              reduce using rule 50 (term -> term DIVIDE factor .)
    LE              reduce using rule 50 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 50 (term -> term DIVIDE factor .)
    NOTEQUALS       reduce using rule 50 (term -> term DIVIDE factor .)
    AND             reduce using rule 50 (term -> term DIVIDE factor .)
    OR              reduce using rule 50 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 50 (term -> term DIVIDE factor .)
    VAR             reduce using rule 50 (term -> term DIVIDE factor .)
    LET             reduce using rule 50 (term -> term DIVIDE factor .)
    CONST           reduce using rule 50 (term -> term DIVIDE factor .)
    ID              reduce using rule 50 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 50 (term -> term DIVIDE factor .)
    IF              reduce using rule 50 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 50 (term -> term DIVIDE factor .)
    FOR             reduce using rule 50 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 50 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 50 (term -> term DIVIDE factor .)
    TRY             reduce using rule 50 (term -> term DIVIDE factor .)
    THROW           reduce using rule 50 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 50 (term -> term DIVIDE factor .)
    CONSOLE         reduce using rule 50 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 50 (term -> term DIVIDE factor .)
    STRING          reduce using rule 50 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 50 (term -> term DIVIDE factor .)
    NOT             reduce using rule 50 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 50 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 50 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 50 (term -> term DIVIDE factor .)
    $end            reduce using rule 50 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 50 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 50 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 50 (term -> term DIVIDE factor .)
    COLON           reduce using rule 50 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 50 (term -> term DIVIDE factor .)
    error           reduce using rule 50 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 50 (term -> term DIVIDE factor .)
    CASE            reduce using rule 50 (term -> term DIVIDE factor .)


state 121

    (30) declaration -> VAR ID ASSIGN . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 160
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 122

    (33) assignment -> ID ASSIGN expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       reduce using rule 33 (assignment -> ID ASSIGN expression .)
    RETURN          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    VAR             reduce using rule 33 (assignment -> ID ASSIGN expression .)
    LET             reduce using rule 33 (assignment -> ID ASSIGN expression .)
    CONST           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    ID              reduce using rule 33 (assignment -> ID ASSIGN expression .)
    FUNCTION        reduce using rule 33 (assignment -> ID ASSIGN expression .)
    IF              reduce using rule 33 (assignment -> ID ASSIGN expression .)
    WHILE           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    FOR             reduce using rule 33 (assignment -> ID ASSIGN expression .)
    BREAK           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    SWITCH          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    TRY             reduce using rule 33 (assignment -> ID ASSIGN expression .)
    THROW           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    LBRACKET        reduce using rule 33 (assignment -> ID ASSIGN expression .)
    CONSOLE         reduce using rule 33 (assignment -> ID ASSIGN expression .)
    NUMBER          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    STRING          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    LPAREN          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    NOT             reduce using rule 33 (assignment -> ID ASSIGN expression .)
    TRUE            reduce using rule 33 (assignment -> ID ASSIGN expression .)
    FALSE           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    LBRACE          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    $end            reduce using rule 33 (assignment -> ID ASSIGN expression .)
    RBRACE          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    error           reduce using rule 33 (assignment -> ID ASSIGN expression .)
    RPAREN          reduce using rule 33 (assignment -> ID ASSIGN expression .)
    DEFAULT         reduce using rule 33 (assignment -> ID ASSIGN expression .)
    CASE            reduce using rule 33 (assignment -> ID ASSIGN expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 123

    (67) method_call -> ID DOT ID . LPAREN arguments RPAREN
    (89) property_access -> ID DOT ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 161
    TIMES           reduce using rule 89 (property_access -> ID DOT ID .)
    DIVIDE          reduce using rule 89 (property_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 89 (property_access -> ID DOT ID .)
    QUESTION        reduce using rule 89 (property_access -> ID DOT ID .)
    PLUS            reduce using rule 89 (property_access -> ID DOT ID .)
    MINUS           reduce using rule 89 (property_access -> ID DOT ID .)
    GT              reduce using rule 89 (property_access -> ID DOT ID .)
    LT              reduce using rule 89 (property_access -> ID DOT ID .)
    GE              reduce using rule 89 (property_access -> ID DOT ID .)
    LE              reduce using rule 89 (property_access -> ID DOT ID .)
    EQUALS          reduce using rule 89 (property_access -> ID DOT ID .)
    NOTEQUALS       reduce using rule 89 (property_access -> ID DOT ID .)
    AND             reduce using rule 89 (property_access -> ID DOT ID .)
    OR              reduce using rule 89 (property_access -> ID DOT ID .)
    RETURN          reduce using rule 89 (property_access -> ID DOT ID .)
    VAR             reduce using rule 89 (property_access -> ID DOT ID .)
    LET             reduce using rule 89 (property_access -> ID DOT ID .)
    CONST           reduce using rule 89 (property_access -> ID DOT ID .)
    ID              reduce using rule 89 (property_access -> ID DOT ID .)
    FUNCTION        reduce using rule 89 (property_access -> ID DOT ID .)
    IF              reduce using rule 89 (property_access -> ID DOT ID .)
    WHILE           reduce using rule 89 (property_access -> ID DOT ID .)
    FOR             reduce using rule 89 (property_access -> ID DOT ID .)
    BREAK           reduce using rule 89 (property_access -> ID DOT ID .)
    SWITCH          reduce using rule 89 (property_access -> ID DOT ID .)
    TRY             reduce using rule 89 (property_access -> ID DOT ID .)
    THROW           reduce using rule 89 (property_access -> ID DOT ID .)
    LBRACKET        reduce using rule 89 (property_access -> ID DOT ID .)
    CONSOLE         reduce using rule 89 (property_access -> ID DOT ID .)
    NUMBER          reduce using rule 89 (property_access -> ID DOT ID .)
    STRING          reduce using rule 89 (property_access -> ID DOT ID .)
    NOT             reduce using rule 89 (property_access -> ID DOT ID .)
    TRUE            reduce using rule 89 (property_access -> ID DOT ID .)
    FALSE           reduce using rule 89 (property_access -> ID DOT ID .)
    LBRACE          reduce using rule 89 (property_access -> ID DOT ID .)
    $end            reduce using rule 89 (property_access -> ID DOT ID .)
    RPAREN          reduce using rule 89 (property_access -> ID DOT ID .)
    RBRACKET        reduce using rule 89 (property_access -> ID DOT ID .)
    COMMA           reduce using rule 89 (property_access -> ID DOT ID .)
    COLON           reduce using rule 89 (property_access -> ID DOT ID .)
    RBRACE          reduce using rule 89 (property_access -> ID DOT ID .)
    error           reduce using rule 89 (property_access -> ID DOT ID .)
    DEFAULT         reduce using rule 89 (property_access -> ID DOT ID .)
    CASE            reduce using rule 89 (property_access -> ID DOT ID .)

  ! LPAREN          [ reduce using rule 89 (property_access -> ID DOT ID .) ]


state 124

    (65) function_call -> ID LPAREN arguments . RPAREN
    (71) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 162
    COMMA           shift and go to state 163


state 125

    (70) arguments -> expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 70 (arguments -> expression .)
    COMMA           reduce using rule 70 (arguments -> expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 126

    (85) array_access -> ID LBRACKET expression . RBRACKET
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RBRACKET        shift and go to state 164
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 127

    (31) declaration -> LET ID ASSIGN . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 165
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 128

    (32) declaration -> CONST ID ASSIGN . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 166
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 129

    (54) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LET             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    CONST           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    TRY             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    THROW           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    CONSOLE         reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    error           reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 54 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 54 (factor -> LPAREN expression RPAREN .)


state 130

    (105) arrow_function -> LPAREN parameter_list RPAREN . ARROW expression

    ARROW           shift and go to state 167


state 131

    (25) parameter_list -> parameter_list COMMA . ID

    ID              shift and go to state 168


state 132

    (22) function_declaration -> FUNCTION ID LPAREN . parameter_list RPAREN block
    (124) function_declaration -> FUNCTION ID LPAREN . error RPAREN block
    (23) parameter_list -> .
    (24) parameter_list -> . ID
    (25) parameter_list -> . parameter_list COMMA ID

    error           shift and go to state 170
    RPAREN          reduce using rule 23 (parameter_list -> .)
    COMMA           reduce using rule 23 (parameter_list -> .)
    ID              shift and go to state 134

    parameter_list                 shift and go to state 169

state 133

    (113) anonymous_function -> FUNCTION LPAREN parameter_list . RPAREN block
    (25) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 171
    COMMA           shift and go to state 131


state 134

    (24) parameter_list -> ID .

    RPAREN          reduce using rule 24 (parameter_list -> ID .)
    COMMA           reduce using rule 24 (parameter_list -> ID .)


state 135

    (72) if_statement -> IF LPAREN condition . RPAREN block
    (73) if_statement -> IF LPAREN condition . RPAREN block ELSE block

    RPAREN          shift and go to state 172


state 136

    (122) if_statement -> IF LPAREN error . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 173

state 137

    (74) condition -> expression .
    (75) condition -> expression . GT expression
    (76) condition -> expression . LT expression
    (77) condition -> expression . GE expression
    (78) condition -> expression . LE expression
    (79) condition -> expression . EQUALS expression
    (80) condition -> expression . NOTEQUALS expression
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 74 (condition -> expression .)
    GT              shift and go to state 174
    LT              shift and go to state 175
    GE              shift and go to state 176
    LE              shift and go to state 177
    EQUALS          shift and go to state 178
    NOTEQUALS       shift and go to state 179
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    AND             shift and go to state 60
    OR              shift and go to state 61


state 138

    (116) if_statement -> IF error block .

    RETURN          reduce using rule 116 (if_statement -> IF error block .)
    VAR             reduce using rule 116 (if_statement -> IF error block .)
    LET             reduce using rule 116 (if_statement -> IF error block .)
    CONST           reduce using rule 116 (if_statement -> IF error block .)
    ID              reduce using rule 116 (if_statement -> IF error block .)
    FUNCTION        reduce using rule 116 (if_statement -> IF error block .)
    IF              reduce using rule 116 (if_statement -> IF error block .)
    WHILE           reduce using rule 116 (if_statement -> IF error block .)
    FOR             reduce using rule 116 (if_statement -> IF error block .)
    BREAK           reduce using rule 116 (if_statement -> IF error block .)
    SWITCH          reduce using rule 116 (if_statement -> IF error block .)
    TRY             reduce using rule 116 (if_statement -> IF error block .)
    THROW           reduce using rule 116 (if_statement -> IF error block .)
    LBRACKET        reduce using rule 116 (if_statement -> IF error block .)
    CONSOLE         reduce using rule 116 (if_statement -> IF error block .)
    NUMBER          reduce using rule 116 (if_statement -> IF error block .)
    STRING          reduce using rule 116 (if_statement -> IF error block .)
    LPAREN          reduce using rule 116 (if_statement -> IF error block .)
    NOT             reduce using rule 116 (if_statement -> IF error block .)
    TRUE            reduce using rule 116 (if_statement -> IF error block .)
    FALSE           reduce using rule 116 (if_statement -> IF error block .)
    LBRACE          reduce using rule 116 (if_statement -> IF error block .)
    $end            reduce using rule 116 (if_statement -> IF error block .)
    RBRACE          reduce using rule 116 (if_statement -> IF error block .)
    error           reduce using rule 116 (if_statement -> IF error block .)
    DEFAULT         reduce using rule 116 (if_statement -> IF error block .)
    CASE            reduce using rule 116 (if_statement -> IF error block .)


state 139

    (86) while_statement -> WHILE LPAREN condition . RPAREN block

    RPAREN          shift and go to state 180


state 140

    (91) for_statement -> FOR LPAREN for_init . SEMICOLON for_condition SEMICOLON for_update RPAREN block

    SEMICOLON       shift and go to state 181


state 141

    (92) for_init -> declaration .

    SEMICOLON       reduce using rule 92 (for_init -> declaration .)


state 142

    (93) for_init -> assignment .

    SEMICOLON       reduce using rule 93 (for_init -> assignment .)


state 143

    (94) for_init -> empty .

    SEMICOLON       reduce using rule 94 (for_init -> empty .)


state 144

    (33) assignment -> ID . ASSIGN expression

    ASSIGN          shift and go to state 73


state 145

    (121) for_statement -> FOR error block .

    RETURN          reduce using rule 121 (for_statement -> FOR error block .)
    VAR             reduce using rule 121 (for_statement -> FOR error block .)
    LET             reduce using rule 121 (for_statement -> FOR error block .)
    CONST           reduce using rule 121 (for_statement -> FOR error block .)
    ID              reduce using rule 121 (for_statement -> FOR error block .)
    FUNCTION        reduce using rule 121 (for_statement -> FOR error block .)
    IF              reduce using rule 121 (for_statement -> FOR error block .)
    WHILE           reduce using rule 121 (for_statement -> FOR error block .)
    FOR             reduce using rule 121 (for_statement -> FOR error block .)
    BREAK           reduce using rule 121 (for_statement -> FOR error block .)
    SWITCH          reduce using rule 121 (for_statement -> FOR error block .)
    TRY             reduce using rule 121 (for_statement -> FOR error block .)
    THROW           reduce using rule 121 (for_statement -> FOR error block .)
    LBRACKET        reduce using rule 121 (for_statement -> FOR error block .)
    CONSOLE         reduce using rule 121 (for_statement -> FOR error block .)
    NUMBER          reduce using rule 121 (for_statement -> FOR error block .)
    STRING          reduce using rule 121 (for_statement -> FOR error block .)
    LPAREN          reduce using rule 121 (for_statement -> FOR error block .)
    NOT             reduce using rule 121 (for_statement -> FOR error block .)
    TRUE            reduce using rule 121 (for_statement -> FOR error block .)
    FALSE           reduce using rule 121 (for_statement -> FOR error block .)
    LBRACE          reduce using rule 121 (for_statement -> FOR error block .)
    $end            reduce using rule 121 (for_statement -> FOR error block .)
    RBRACE          reduce using rule 121 (for_statement -> FOR error block .)
    error           reduce using rule 121 (for_statement -> FOR error block .)
    DEFAULT         reduce using rule 121 (for_statement -> FOR error block .)
    CASE            reduce using rule 121 (for_statement -> FOR error block .)


state 146

    (106) switch_statement -> SWITCH LPAREN expression . RPAREN LBRACE case_blocks default_block RBRACE
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          shift and go to state 182
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 147

    (126) switch_statement -> SWITCH LPAREN error . RPAREN LBRACE case_blocks default_block RBRACE

    RPAREN          shift and go to state 183


state 148

    (120) switch_statement -> SWITCH error block .

    RETURN          reduce using rule 120 (switch_statement -> SWITCH error block .)
    VAR             reduce using rule 120 (switch_statement -> SWITCH error block .)
    LET             reduce using rule 120 (switch_statement -> SWITCH error block .)
    CONST           reduce using rule 120 (switch_statement -> SWITCH error block .)
    ID              reduce using rule 120 (switch_statement -> SWITCH error block .)
    FUNCTION        reduce using rule 120 (switch_statement -> SWITCH error block .)
    IF              reduce using rule 120 (switch_statement -> SWITCH error block .)
    WHILE           reduce using rule 120 (switch_statement -> SWITCH error block .)
    FOR             reduce using rule 120 (switch_statement -> SWITCH error block .)
    BREAK           reduce using rule 120 (switch_statement -> SWITCH error block .)
    SWITCH          reduce using rule 120 (switch_statement -> SWITCH error block .)
    TRY             reduce using rule 120 (switch_statement -> SWITCH error block .)
    THROW           reduce using rule 120 (switch_statement -> SWITCH error block .)
    LBRACKET        reduce using rule 120 (switch_statement -> SWITCH error block .)
    CONSOLE         reduce using rule 120 (switch_statement -> SWITCH error block .)
    NUMBER          reduce using rule 120 (switch_statement -> SWITCH error block .)
    STRING          reduce using rule 120 (switch_statement -> SWITCH error block .)
    LPAREN          reduce using rule 120 (switch_statement -> SWITCH error block .)
    NOT             reduce using rule 120 (switch_statement -> SWITCH error block .)
    TRUE            reduce using rule 120 (switch_statement -> SWITCH error block .)
    FALSE           reduce using rule 120 (switch_statement -> SWITCH error block .)
    LBRACE          reduce using rule 120 (switch_statement -> SWITCH error block .)
    $end            reduce using rule 120 (switch_statement -> SWITCH error block .)
    RBRACE          reduce using rule 120 (switch_statement -> SWITCH error block .)
    error           reduce using rule 120 (switch_statement -> SWITCH error block .)
    DEFAULT         reduce using rule 120 (switch_statement -> SWITCH error block .)
    CASE            reduce using rule 120 (switch_statement -> SWITCH error block .)


state 149

    (100) object_literal -> LBRACE object_properties RBRACE .

    TIMES           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    DIVIDE          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    SEMICOLON       reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    QUESTION        reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    PLUS            reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    MINUS           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    GT              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LT              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    GE              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LE              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    EQUALS          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    NOTEQUALS       reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    AND             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    OR              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    RETURN          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    VAR             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LET             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    CONST           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    ID              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    FUNCTION        reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    IF              reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    WHILE           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    FOR             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    BREAK           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    SWITCH          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    TRY             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    THROW           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LBRACKET        reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    CONSOLE         reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    NUMBER          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    STRING          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LPAREN          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    NOT             reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    TRUE            reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    FALSE           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    LBRACE          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    $end            reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    RPAREN          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    RBRACKET        reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    COMMA           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    COLON           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    RBRACE          reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    error           reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    DEFAULT         reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)
    CASE            reduce using rule 100 (object_literal -> LBRACE object_properties RBRACE .)


state 150

    (102) object_properties -> object_properties COMMA . object_property
    (104) object_property -> . ID COLON expression

    ID              shift and go to state 97

    object_property                shift and go to state 184

state 151

    (104) object_property -> ID COLON . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 185
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 152

    (114) try_catch_statement -> TRY block CATCH . LPAREN ID RPAREN block

    LPAREN          shift and go to state 186


state 153

    (87) block -> LBRACE statements . RBRACE
    (123) block -> LBRACE statements . error
    (4) statements -> statements . statement
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

    RBRACE          shift and go to state 187
    error           shift and go to state 188
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

    statement                      shift and go to state 49
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 154

    (5) statements -> empty .

    RBRACE          reduce using rule 5 (statements -> empty .)
    error           reduce using rule 5 (statements -> empty .)
    RETURN          reduce using rule 5 (statements -> empty .)
    VAR             reduce using rule 5 (statements -> empty .)
    LET             reduce using rule 5 (statements -> empty .)
    CONST           reduce using rule 5 (statements -> empty .)
    ID              reduce using rule 5 (statements -> empty .)
    FUNCTION        reduce using rule 5 (statements -> empty .)
    IF              reduce using rule 5 (statements -> empty .)
    WHILE           reduce using rule 5 (statements -> empty .)
    FOR             reduce using rule 5 (statements -> empty .)
    BREAK           reduce using rule 5 (statements -> empty .)
    SWITCH          reduce using rule 5 (statements -> empty .)
    TRY             reduce using rule 5 (statements -> empty .)
    THROW           reduce using rule 5 (statements -> empty .)
    LBRACKET        reduce using rule 5 (statements -> empty .)
    CONSOLE         reduce using rule 5 (statements -> empty .)
    NUMBER          reduce using rule 5 (statements -> empty .)
    STRING          reduce using rule 5 (statements -> empty .)
    LPAREN          reduce using rule 5 (statements -> empty .)
    NOT             reduce using rule 5 (statements -> empty .)
    TRUE            reduce using rule 5 (statements -> empty .)
    FALSE           reduce using rule 5 (statements -> empty .)
    LBRACE          reduce using rule 5 (statements -> empty .)
    DEFAULT         reduce using rule 5 (statements -> empty .)
    CASE            reduce using rule 5 (statements -> empty .)


state 155

    (115) throw_statement -> THROW expression SEMICOLON .

    RETURN          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    VAR             reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    LET             reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    CONST           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    ID              reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    FUNCTION        reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    IF              reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    WHILE           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    FOR             reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    BREAK           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    SWITCH          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    TRY             reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    THROW           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    LBRACKET        reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    CONSOLE         reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    NUMBER          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    STRING          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    LPAREN          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    NOT             reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    TRUE            reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    FALSE           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    LBRACE          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    $end            reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    RBRACE          reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    error           reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    DEFAULT         reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)
    CASE            reduce using rule 115 (throw_statement -> THROW expression SEMICOLON .)


state 156

    (81) array_literal -> LBRACKET array_elements RBRACKET .

    SEMICOLON       reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    QUESTION        reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    PLUS            reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    MINUS           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    GT              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LT              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    GE              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LE              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    EQUALS          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    NOTEQUALS       reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    AND             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    OR              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    RETURN          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    VAR             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LET             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    CONST           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    ID              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    FUNCTION        reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    IF              reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    WHILE           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    FOR             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    BREAK           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    SWITCH          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    TRY             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    THROW           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LBRACKET        reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    CONSOLE         reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    NUMBER          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    STRING          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LPAREN          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    NOT             reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    TRUE            reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    FALSE           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    LBRACE          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    $end            reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    RPAREN          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    RBRACKET        reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    COMMA           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    COLON           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    RBRACE          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    error           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    DEFAULT         reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    CASE            reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    TIMES           reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)
    DIVIDE          reduce using rule 81 (array_literal -> LBRACKET array_elements RBRACKET .)


state 157

    (84) array_elements -> array_elements COMMA . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 189
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 158

    (68) console_log -> CONSOLE DOT LOG . LPAREN arguments RPAREN

    LPAREN          shift and go to state 190


state 159

    (34) expression -> expression QUESTION expression COLON . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 191
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 160

    (30) declaration -> VAR ID ASSIGN expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    RETURN          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    VAR             reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    LET             reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    CONST           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    ID              reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    FUNCTION        reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    IF              reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    WHILE           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    FOR             reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    BREAK           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    SWITCH          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    TRY             reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    THROW           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    LBRACKET        reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    CONSOLE         reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    NUMBER          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    STRING          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    LPAREN          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    NOT             reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    TRUE            reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    FALSE           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    LBRACE          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    $end            reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    RBRACE          reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    error           reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    DEFAULT         reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    CASE            reduce using rule 30 (declaration -> VAR ID ASSIGN expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 161

    (67) method_call -> ID DOT ID LPAREN . arguments RPAREN
    (69) arguments -> .
    (70) arguments -> . expression
    (71) arguments -> . arguments COMMA expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    RPAREN          reduce using rule 69 (arguments -> .)
    COMMA           reduce using rule 69 (arguments -> .)
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    arguments                      shift and go to state 192
    expression                     shift and go to state 125
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 162

    (65) function_call -> ID LPAREN arguments RPAREN .

    TIMES           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    QUESTION        reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    GT              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LT              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    GE              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LE              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    AND             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    OR              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    VAR             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LET             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    CONST           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    FOR             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    BREAK           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    TRY             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    THROW           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LBRACKET        reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    CONSOLE         reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    NUMBER          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    STRING          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    NOT             reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    TRUE            reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    FALSE           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    COLON           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    error           reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)
    CASE            reduce using rule 65 (function_call -> ID LPAREN arguments RPAREN .)


state 163

    (71) arguments -> arguments COMMA . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 193
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 164

    (85) array_access -> ID LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    NOTEQUALS       reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    VAR             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LET             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    CONST           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    TRY             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    THROW           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    CONSOLE         reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    STRING          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    NOT             reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    $end            reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    error           reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)
    CASE            reduce using rule 85 (array_access -> ID LBRACKET expression RBRACKET .)


state 165

    (31) declaration -> LET ID ASSIGN expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    RETURN          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    VAR             reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    LET             reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    CONST           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    ID              reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    FUNCTION        reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    IF              reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    WHILE           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    FOR             reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    BREAK           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    SWITCH          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    TRY             reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    THROW           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    LBRACKET        reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    CONSOLE         reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    NUMBER          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    STRING          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    LPAREN          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    NOT             reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    TRUE            reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    FALSE           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    LBRACE          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    $end            reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    RBRACE          reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    error           reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    DEFAULT         reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    CASE            reduce using rule 31 (declaration -> LET ID ASSIGN expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 166

    (32) declaration -> CONST ID ASSIGN expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    RETURN          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    VAR             reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    LET             reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    CONST           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    ID              reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    FUNCTION        reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    IF              reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    WHILE           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    FOR             reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    BREAK           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    SWITCH          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    TRY             reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    THROW           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    LBRACKET        reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    CONSOLE         reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    NUMBER          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    STRING          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    LPAREN          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    NOT             reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    TRUE            reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    FALSE           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    LBRACE          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    $end            reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    RBRACE          reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    error           reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    DEFAULT         reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    CASE            reduce using rule 32 (declaration -> CONST ID ASSIGN expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 167

    (105) arrow_function -> LPAREN parameter_list RPAREN ARROW . expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 194
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 168

    (25) parameter_list -> parameter_list COMMA ID .

    RPAREN          reduce using rule 25 (parameter_list -> parameter_list COMMA ID .)
    COMMA           reduce using rule 25 (parameter_list -> parameter_list COMMA ID .)


state 169

    (22) function_declaration -> FUNCTION ID LPAREN parameter_list . RPAREN block
    (25) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 131


state 170

    (124) function_declaration -> FUNCTION ID LPAREN error . RPAREN block

    RPAREN          shift and go to state 196


state 171

    (113) anonymous_function -> FUNCTION LPAREN parameter_list RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 197

state 172

    (72) if_statement -> IF LPAREN condition RPAREN . block
    (73) if_statement -> IF LPAREN condition RPAREN . block ELSE block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 198

state 173

    (122) if_statement -> IF LPAREN error block .

    RETURN          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    VAR             reduce using rule 122 (if_statement -> IF LPAREN error block .)
    LET             reduce using rule 122 (if_statement -> IF LPAREN error block .)
    CONST           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    ID              reduce using rule 122 (if_statement -> IF LPAREN error block .)
    FUNCTION        reduce using rule 122 (if_statement -> IF LPAREN error block .)
    IF              reduce using rule 122 (if_statement -> IF LPAREN error block .)
    WHILE           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    FOR             reduce using rule 122 (if_statement -> IF LPAREN error block .)
    BREAK           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    SWITCH          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    TRY             reduce using rule 122 (if_statement -> IF LPAREN error block .)
    THROW           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    LBRACKET        reduce using rule 122 (if_statement -> IF LPAREN error block .)
    CONSOLE         reduce using rule 122 (if_statement -> IF LPAREN error block .)
    NUMBER          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    STRING          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    LPAREN          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    NOT             reduce using rule 122 (if_statement -> IF LPAREN error block .)
    TRUE            reduce using rule 122 (if_statement -> IF LPAREN error block .)
    FALSE           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    LBRACE          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    $end            reduce using rule 122 (if_statement -> IF LPAREN error block .)
    RBRACE          reduce using rule 122 (if_statement -> IF LPAREN error block .)
    error           reduce using rule 122 (if_statement -> IF LPAREN error block .)
    DEFAULT         reduce using rule 122 (if_statement -> IF LPAREN error block .)
    CASE            reduce using rule 122 (if_statement -> IF LPAREN error block .)


state 174

    (75) condition -> expression GT . expression
    (38) expression -> expression GT . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 199
    term                           shift and go to state 200
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 175

    (76) condition -> expression LT . expression
    (39) expression -> expression LT . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 201
    term                           shift and go to state 202
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 176

    (77) condition -> expression GE . expression
    (40) expression -> expression GE . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 203
    term                           shift and go to state 204
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 177

    (78) condition -> expression LE . expression
    (41) expression -> expression LE . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 205
    term                           shift and go to state 206
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 178

    (79) condition -> expression EQUALS . expression
    (42) expression -> expression EQUALS . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 207
    term                           shift and go to state 208
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 179

    (80) condition -> expression NOTEQUALS . expression
    (43) expression -> expression NOTEQUALS . term
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 209
    term                           shift and go to state 210
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 180

    (86) while_statement -> WHILE LPAREN condition RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 211

state 181

    (91) for_statement -> FOR LPAREN for_init SEMICOLON . for_condition SEMICOLON for_update RPAREN block
    (95) for_condition -> . expression
    (96) for_condition -> . empty
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (88) empty -> .
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    SEMICOLON       reduce using rule 88 (empty -> .)
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    for_condition                  shift and go to state 212
    expression                     shift and go to state 213
    empty                          shift and go to state 214
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 182

    (106) switch_statement -> SWITCH LPAREN expression RPAREN . LBRACE case_blocks default_block RBRACE

    LBRACE          shift and go to state 215


state 183

    (126) switch_statement -> SWITCH LPAREN error RPAREN . LBRACE case_blocks default_block RBRACE

    LBRACE          shift and go to state 216


state 184

    (102) object_properties -> object_properties COMMA object_property .

    RBRACE          reduce using rule 102 (object_properties -> object_properties COMMA object_property .)
    COMMA           reduce using rule 102 (object_properties -> object_properties COMMA object_property .)


state 185

    (104) object_property -> ID COLON expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RBRACE          reduce using rule 104 (object_property -> ID COLON expression .)
    COMMA           reduce using rule 104 (object_property -> ID COLON expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 186

    (114) try_catch_statement -> TRY block CATCH LPAREN . ID RPAREN block

    ID              shift and go to state 217


state 187

    (87) block -> LBRACE statements RBRACE .

    CATCH           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    VAR             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LET             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    CONST           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    ID              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 87 (block -> LBRACE statements RBRACE .)
    IF              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    FOR             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    SWITCH          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    TRY             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    THROW           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 87 (block -> LBRACE statements RBRACE .)
    CONSOLE         reduce using rule 87 (block -> LBRACE statements RBRACE .)
    NUMBER          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    STRING          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LPAREN          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    NOT             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    TRUE            reduce using rule 87 (block -> LBRACE statements RBRACE .)
    FALSE           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LBRACE          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    $end            reduce using rule 87 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    error           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 87 (block -> LBRACE statements RBRACE .)
    CASE            reduce using rule 87 (block -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 87 (block -> LBRACE statements RBRACE .)
    QUESTION        reduce using rule 87 (block -> LBRACE statements RBRACE .)
    PLUS            reduce using rule 87 (block -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    GT              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LT              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    GE              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    LE              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    EQUALS          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    NOTEQUALS       reduce using rule 87 (block -> LBRACE statements RBRACE .)
    AND             reduce using rule 87 (block -> LBRACE statements RBRACE .)
    OR              reduce using rule 87 (block -> LBRACE statements RBRACE .)
    RPAREN          reduce using rule 87 (block -> LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 87 (block -> LBRACE statements RBRACE .)
    COMMA           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    COLON           reduce using rule 87 (block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 87 (block -> LBRACE statements RBRACE .)


state 188

    (123) block -> LBRACE statements error .

    CATCH           reduce using rule 123 (block -> LBRACE statements error .)
    RETURN          reduce using rule 123 (block -> LBRACE statements error .)
    VAR             reduce using rule 123 (block -> LBRACE statements error .)
    LET             reduce using rule 123 (block -> LBRACE statements error .)
    CONST           reduce using rule 123 (block -> LBRACE statements error .)
    ID              reduce using rule 123 (block -> LBRACE statements error .)
    FUNCTION        reduce using rule 123 (block -> LBRACE statements error .)
    IF              reduce using rule 123 (block -> LBRACE statements error .)
    WHILE           reduce using rule 123 (block -> LBRACE statements error .)
    FOR             reduce using rule 123 (block -> LBRACE statements error .)
    BREAK           reduce using rule 123 (block -> LBRACE statements error .)
    SWITCH          reduce using rule 123 (block -> LBRACE statements error .)
    TRY             reduce using rule 123 (block -> LBRACE statements error .)
    THROW           reduce using rule 123 (block -> LBRACE statements error .)
    LBRACKET        reduce using rule 123 (block -> LBRACE statements error .)
    CONSOLE         reduce using rule 123 (block -> LBRACE statements error .)
    NUMBER          reduce using rule 123 (block -> LBRACE statements error .)
    STRING          reduce using rule 123 (block -> LBRACE statements error .)
    LPAREN          reduce using rule 123 (block -> LBRACE statements error .)
    NOT             reduce using rule 123 (block -> LBRACE statements error .)
    TRUE            reduce using rule 123 (block -> LBRACE statements error .)
    FALSE           reduce using rule 123 (block -> LBRACE statements error .)
    LBRACE          reduce using rule 123 (block -> LBRACE statements error .)
    $end            reduce using rule 123 (block -> LBRACE statements error .)
    RBRACE          reduce using rule 123 (block -> LBRACE statements error .)
    error           reduce using rule 123 (block -> LBRACE statements error .)
    DEFAULT         reduce using rule 123 (block -> LBRACE statements error .)
    CASE            reduce using rule 123 (block -> LBRACE statements error .)
    TIMES           reduce using rule 123 (block -> LBRACE statements error .)
    DIVIDE          reduce using rule 123 (block -> LBRACE statements error .)
    SEMICOLON       reduce using rule 123 (block -> LBRACE statements error .)
    QUESTION        reduce using rule 123 (block -> LBRACE statements error .)
    PLUS            reduce using rule 123 (block -> LBRACE statements error .)
    MINUS           reduce using rule 123 (block -> LBRACE statements error .)
    GT              reduce using rule 123 (block -> LBRACE statements error .)
    LT              reduce using rule 123 (block -> LBRACE statements error .)
    GE              reduce using rule 123 (block -> LBRACE statements error .)
    LE              reduce using rule 123 (block -> LBRACE statements error .)
    EQUALS          reduce using rule 123 (block -> LBRACE statements error .)
    NOTEQUALS       reduce using rule 123 (block -> LBRACE statements error .)
    AND             reduce using rule 123 (block -> LBRACE statements error .)
    OR              reduce using rule 123 (block -> LBRACE statements error .)
    RPAREN          reduce using rule 123 (block -> LBRACE statements error .)
    RBRACKET        reduce using rule 123 (block -> LBRACE statements error .)
    COMMA           reduce using rule 123 (block -> LBRACE statements error .)
    COLON           reduce using rule 123 (block -> LBRACE statements error .)
    ELSE            reduce using rule 123 (block -> LBRACE statements error .)


state 189

    (84) array_elements -> array_elements COMMA expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RBRACKET        reduce using rule 84 (array_elements -> array_elements COMMA expression .)
    COMMA           reduce using rule 84 (array_elements -> array_elements COMMA expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 190

    (68) console_log -> CONSOLE DOT LOG LPAREN . arguments RPAREN
    (69) arguments -> .
    (70) arguments -> . expression
    (71) arguments -> . arguments COMMA expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    RPAREN          reduce using rule 69 (arguments -> .)
    COMMA           reduce using rule 69 (arguments -> .)
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    arguments                      shift and go to state 218
    expression                     shift and go to state 125
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 191

    (34) expression -> expression QUESTION expression COLON expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

  ! shift/reduce conflict for QUESTION resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    RETURN          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    VAR             reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    LET             reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    CONST           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    ID              reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    FUNCTION        reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    IF              reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    WHILE           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    FOR             reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    BREAK           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    SWITCH          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    TRY             reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    THROW           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    LBRACKET        reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    CONSOLE         reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    NUMBER          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    STRING          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    LPAREN          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    NOT             reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    TRUE            reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    FALSE           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    LBRACE          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    $end            reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    RPAREN          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    RBRACKET        reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    COMMA           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    COLON           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    RBRACE          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    error           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    DEFAULT         reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    CASE            reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    TIMES           reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    DIVIDE          reduce using rule 34 (expression -> expression QUESTION expression COLON expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! QUESTION        [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! PLUS            [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! GT              [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! LT              [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! GE              [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! LE              [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! NOTEQUALS       [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! AND             [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression QUESTION expression COLON expression .) ]


state 192

    (67) method_call -> ID DOT ID LPAREN arguments . RPAREN
    (71) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 219
    COMMA           shift and go to state 163


state 193

    (71) arguments -> arguments COMMA expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 71 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 71 (arguments -> arguments COMMA expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 194

    (105) arrow_function -> LPAREN parameter_list RPAREN ARROW expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

  ! shift/reduce conflict for QUESTION resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    TIMES           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    DIVIDE          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    SEMICOLON       reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    RETURN          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    VAR             reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    LET             reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    CONST           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    ID              reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    FUNCTION        reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    IF              reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    WHILE           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    FOR             reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    BREAK           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    SWITCH          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    TRY             reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    THROW           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    LBRACKET        reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    CONSOLE         reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    NUMBER          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    STRING          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    LPAREN          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    NOT             reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    TRUE            reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    FALSE           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    LBRACE          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    $end            reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    RPAREN          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    RBRACKET        reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    COMMA           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    COLON           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    RBRACE          reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    error           reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    DEFAULT         reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    CASE            reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! QUESTION        [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! PLUS            [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! MINUS           [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! GT              [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! LT              [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! GE              [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! LE              [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! EQUALS          [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! NOTEQUALS       [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! AND             [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]
  ! OR              [ reduce using rule 105 (arrow_function -> LPAREN parameter_list RPAREN ARROW expression .) ]


state 195

    (22) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 220

state 196

    (124) function_declaration -> FUNCTION ID LPAREN error RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 221

state 197

    (113) anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .

    TIMES           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    DIVIDE          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    SEMICOLON       reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    QUESTION        reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    PLUS            reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    MINUS           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    GT              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LT              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    GE              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LE              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    EQUALS          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    NOTEQUALS       reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    AND             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    OR              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    RETURN          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    VAR             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LET             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    CONST           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    ID              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    FUNCTION        reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    IF              reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    WHILE           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    FOR             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    BREAK           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    SWITCH          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    TRY             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    THROW           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LBRACKET        reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    CONSOLE         reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    NUMBER          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    STRING          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LPAREN          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    NOT             reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    TRUE            reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    FALSE           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    LBRACE          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    $end            reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    RPAREN          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    RBRACKET        reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    COMMA           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    COLON           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    RBRACE          reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    error           reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    DEFAULT         reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)
    CASE            reduce using rule 113 (anonymous_function -> FUNCTION LPAREN parameter_list RPAREN block .)


state 198

    (72) if_statement -> IF LPAREN condition RPAREN block .
    (73) if_statement -> IF LPAREN condition RPAREN block . ELSE block

    RETURN          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    VAR             reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    LET             reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    CONST           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    ID              reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    FUNCTION        reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    IF              reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    WHILE           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    FOR             reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    BREAK           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    SWITCH          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    TRY             reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    THROW           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    LBRACKET        reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    CONSOLE         reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    NUMBER          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    STRING          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    LPAREN          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    NOT             reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    TRUE            reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    FALSE           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    LBRACE          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    $end            reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    RBRACE          reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    error           reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    DEFAULT         reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    CASE            reduce using rule 72 (if_statement -> IF LPAREN condition RPAREN block .)
    ELSE            shift and go to state 222


state 199

    (75) condition -> expression GT expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 75 (condition -> expression GT expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 200

    (38) expression -> expression GT term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 38 (expression -> expression GT term .) ]
  ! LT              [ reduce using rule 38 (expression -> expression GT term .) ]
  ! GE              [ reduce using rule 38 (expression -> expression GT term .) ]
  ! LE              [ reduce using rule 38 (expression -> expression GT term .) ]
  ! EQUALS          [ reduce using rule 38 (expression -> expression GT term .) ]
  ! NOTEQUALS       [ reduce using rule 38 (expression -> expression GT term .) ]
  ! QUESTION        [ reduce using rule 38 (expression -> expression GT term .) ]
  ! PLUS            [ reduce using rule 38 (expression -> expression GT term .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression GT term .) ]
  ! AND             [ reduce using rule 38 (expression -> expression GT term .) ]
  ! OR              [ reduce using rule 38 (expression -> expression GT term .) ]
  ! RPAREN          [ reduce using rule 38 (expression -> expression GT term .) ]


state 201

    (76) condition -> expression LT expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 76 (condition -> expression LT expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 202

    (39) expression -> expression LT term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 39 (expression -> expression LT term .) ]
  ! LT              [ reduce using rule 39 (expression -> expression LT term .) ]
  ! GE              [ reduce using rule 39 (expression -> expression LT term .) ]
  ! LE              [ reduce using rule 39 (expression -> expression LT term .) ]
  ! EQUALS          [ reduce using rule 39 (expression -> expression LT term .) ]
  ! NOTEQUALS       [ reduce using rule 39 (expression -> expression LT term .) ]
  ! QUESTION        [ reduce using rule 39 (expression -> expression LT term .) ]
  ! PLUS            [ reduce using rule 39 (expression -> expression LT term .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LT term .) ]
  ! AND             [ reduce using rule 39 (expression -> expression LT term .) ]
  ! OR              [ reduce using rule 39 (expression -> expression LT term .) ]
  ! RPAREN          [ reduce using rule 39 (expression -> expression LT term .) ]


state 203

    (77) condition -> expression GE expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 77 (condition -> expression GE expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 204

    (40) expression -> expression GE term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 40 (expression -> expression GE term .) ]
  ! LT              [ reduce using rule 40 (expression -> expression GE term .) ]
  ! GE              [ reduce using rule 40 (expression -> expression GE term .) ]
  ! LE              [ reduce using rule 40 (expression -> expression GE term .) ]
  ! EQUALS          [ reduce using rule 40 (expression -> expression GE term .) ]
  ! NOTEQUALS       [ reduce using rule 40 (expression -> expression GE term .) ]
  ! QUESTION        [ reduce using rule 40 (expression -> expression GE term .) ]
  ! PLUS            [ reduce using rule 40 (expression -> expression GE term .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression GE term .) ]
  ! AND             [ reduce using rule 40 (expression -> expression GE term .) ]
  ! OR              [ reduce using rule 40 (expression -> expression GE term .) ]
  ! RPAREN          [ reduce using rule 40 (expression -> expression GE term .) ]


state 205

    (78) condition -> expression LE expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 78 (condition -> expression LE expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 206

    (41) expression -> expression LE term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 41 (expression -> expression LE term .) ]
  ! LT              [ reduce using rule 41 (expression -> expression LE term .) ]
  ! GE              [ reduce using rule 41 (expression -> expression LE term .) ]
  ! LE              [ reduce using rule 41 (expression -> expression LE term .) ]
  ! EQUALS          [ reduce using rule 41 (expression -> expression LE term .) ]
  ! NOTEQUALS       [ reduce using rule 41 (expression -> expression LE term .) ]
  ! QUESTION        [ reduce using rule 41 (expression -> expression LE term .) ]
  ! PLUS            [ reduce using rule 41 (expression -> expression LE term .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression LE term .) ]
  ! AND             [ reduce using rule 41 (expression -> expression LE term .) ]
  ! OR              [ reduce using rule 41 (expression -> expression LE term .) ]
  ! RPAREN          [ reduce using rule 41 (expression -> expression LE term .) ]


state 207

    (79) condition -> expression EQUALS expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 79 (condition -> expression EQUALS expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 208

    (42) expression -> expression EQUALS term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! LT              [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! GE              [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! LE              [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! EQUALS          [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! NOTEQUALS       [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! QUESTION        [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! PLUS            [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! AND             [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! OR              [ reduce using rule 42 (expression -> expression EQUALS term .) ]
  ! RPAREN          [ reduce using rule 42 (expression -> expression EQUALS term .) ]


state 209

    (80) condition -> expression NOTEQUALS expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 80 (condition -> expression NOTEQUALS expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 210

    (43) expression -> expression NOTEQUALS term .
    (35) expression -> term .
    (49) term -> term . TIMES factor
    (50) term -> term . DIVIDE factor

  ! reduce/reduce conflict for QUESTION resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for NOTEQUALS resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term .)
    QUESTION        reduce using rule 35 (expression -> term .)
    PLUS            reduce using rule 35 (expression -> term .)
    MINUS           reduce using rule 35 (expression -> term .)
    GT              reduce using rule 35 (expression -> term .)
    LT              reduce using rule 35 (expression -> term .)
    GE              reduce using rule 35 (expression -> term .)
    LE              reduce using rule 35 (expression -> term .)
    EQUALS          reduce using rule 35 (expression -> term .)
    NOTEQUALS       reduce using rule 35 (expression -> term .)
    AND             reduce using rule 35 (expression -> term .)
    OR              reduce using rule 35 (expression -> term .)
    RPAREN          reduce using rule 35 (expression -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

  ! GT              [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! LT              [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! GE              [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! LE              [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! EQUALS          [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! NOTEQUALS       [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! QUESTION        [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! AND             [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! OR              [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]
  ! RPAREN          [ reduce using rule 43 (expression -> expression NOTEQUALS term .) ]


state 211

    (86) while_statement -> WHILE LPAREN condition RPAREN block .

    RETURN          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    VAR             reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    LET             reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    CONST           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    ID              reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    FUNCTION        reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    IF              reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    WHILE           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    FOR             reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    BREAK           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    SWITCH          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    TRY             reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    THROW           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    LBRACKET        reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    CONSOLE         reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    NUMBER          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    STRING          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    LPAREN          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    NOT             reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    TRUE            reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    FALSE           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    LBRACE          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    $end            reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    RBRACE          reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    error           reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    DEFAULT         reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)
    CASE            reduce using rule 86 (while_statement -> WHILE LPAREN condition RPAREN block .)


state 212

    (91) for_statement -> FOR LPAREN for_init SEMICOLON for_condition . SEMICOLON for_update RPAREN block

    SEMICOLON       shift and go to state 223


state 213

    (95) for_condition -> expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    SEMICOLON       reduce using rule 95 (for_condition -> expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 214

    (96) for_condition -> empty .

    SEMICOLON       reduce using rule 96 (for_condition -> empty .)


state 215

    (106) switch_statement -> SWITCH LPAREN expression RPAREN LBRACE . case_blocks default_block RBRACE
    (107) case_blocks -> . case_blocks case_block
    (108) case_blocks -> . case_block
    (109) case_block -> . CASE error COLON
    (110) case_block -> . CASE expression COLON statements
    (125) case_block -> . CASE error COLON statements

    CASE            shift and go to state 226

    case_blocks                    shift and go to state 224
    case_block                     shift and go to state 225

state 216

    (126) switch_statement -> SWITCH LPAREN error RPAREN LBRACE . case_blocks default_block RBRACE
    (107) case_blocks -> . case_blocks case_block
    (108) case_blocks -> . case_block
    (109) case_block -> . CASE error COLON
    (110) case_block -> . CASE expression COLON statements
    (125) case_block -> . CASE error COLON statements

    CASE            shift and go to state 226

    case_blocks                    shift and go to state 227
    case_block                     shift and go to state 225

state 217

    (114) try_catch_statement -> TRY block CATCH LPAREN ID . RPAREN block

    RPAREN          shift and go to state 228


state 218

    (68) console_log -> CONSOLE DOT LOG LPAREN arguments . RPAREN
    (71) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 229
    COMMA           shift and go to state 163


state 219

    (67) method_call -> ID DOT ID LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    VAR             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LET             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    CONST           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    ID              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    IF              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    FOR             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    BREAK           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    TRY             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    THROW           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LBRACKET        reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    CONSOLE         reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    NUMBER          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    STRING          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    NOT             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    TRUE            reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    FALSE           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    $end            reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    QUESTION        reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    GT              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LT              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    GE              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    LE              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    AND             reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    OR              reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    COLON           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    error           reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)
    CASE            reduce using rule 67 (method_call -> ID DOT ID LPAREN arguments RPAREN .)


state 220

    (22) function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .

    RETURN          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    VAR             reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    LET             reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    CONST           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    ID              reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    FUNCTION        reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    IF              reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    WHILE           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    FOR             reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    BREAK           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    SWITCH          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    TRY             reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    THROW           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    LBRACKET        reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    CONSOLE         reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    NUMBER          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    STRING          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    LPAREN          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    NOT             reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    TRUE            reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    FALSE           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    LBRACE          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    $end            reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    RBRACE          reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    error           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    DEFAULT         reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)
    CASE            reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN block .)


state 221

    (124) function_declaration -> FUNCTION ID LPAREN error RPAREN block .

    RETURN          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    VAR             reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    LET             reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    CONST           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    ID              reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    FUNCTION        reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    IF              reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    WHILE           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    FOR             reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    BREAK           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    SWITCH          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    TRY             reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    THROW           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    LBRACKET        reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    CONSOLE         reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    NUMBER          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    STRING          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    LPAREN          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    NOT             reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    TRUE            reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    FALSE           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    LBRACE          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    $end            reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    RBRACE          reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    error           reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    DEFAULT         reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)
    CASE            reduce using rule 124 (function_declaration -> FUNCTION ID LPAREN error RPAREN block .)


state 222

    (73) if_statement -> IF LPAREN condition RPAREN block ELSE . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 230

state 223

    (91) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON . for_update RPAREN block
    (97) for_update -> . assignment
    (98) for_update -> . expression
    (99) for_update -> . empty
    (33) assignment -> . ID ASSIGN expression
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (88) empty -> .
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    ID              shift and go to state 235
    RPAREN          reduce using rule 88 (empty -> .)
    LBRACKET        shift and go to state 37
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    for_update                     shift and go to state 231
    assignment                     shift and go to state 232
    expression                     shift and go to state 233
    empty                          shift and go to state 234
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 224

    (106) switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks . default_block RBRACE
    (107) case_blocks -> case_blocks . case_block
    (111) default_block -> . DEFAULT COLON statements
    (112) default_block -> . empty
    (109) case_block -> . CASE error COLON
    (110) case_block -> . CASE expression COLON statements
    (125) case_block -> . CASE error COLON statements
    (88) empty -> .

    DEFAULT         shift and go to state 238
    CASE            shift and go to state 226
    RBRACE          reduce using rule 88 (empty -> .)

    default_block                  shift and go to state 236
    case_block                     shift and go to state 237
    empty                          shift and go to state 239

state 225

    (108) case_blocks -> case_block .

    DEFAULT         reduce using rule 108 (case_blocks -> case_block .)
    CASE            reduce using rule 108 (case_blocks -> case_block .)
    RBRACE          reduce using rule 108 (case_blocks -> case_block .)


state 226

    (109) case_block -> CASE . error COLON
    (110) case_block -> CASE . expression COLON statements
    (125) case_block -> CASE . error COLON statements
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN

    error           shift and go to state 240
    LBRACKET        shift and go to state 37
    ID              shift and go to state 66
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33
    FUNCTION        shift and go to state 68
    CONSOLE         shift and go to state 38

    expression                     shift and go to state 241
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    factor                         shift and go to state 36
    method_call                    shift and go to state 67
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
    console_log                    shift and go to state 25

state 227

    (126) switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks . default_block RBRACE
    (107) case_blocks -> case_blocks . case_block
    (111) default_block -> . DEFAULT COLON statements
    (112) default_block -> . empty
    (109) case_block -> . CASE error COLON
    (110) case_block -> . CASE expression COLON statements
    (125) case_block -> . CASE error COLON statements
    (88) empty -> .

    DEFAULT         shift and go to state 238
    CASE            shift and go to state 226
    RBRACE          reduce using rule 88 (empty -> .)

    default_block                  shift and go to state 242
    case_block                     shift and go to state 237
    empty                          shift and go to state 239

state 228

    (114) try_catch_statement -> TRY block CATCH LPAREN ID RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 243

state 229

    (68) console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    RETURN          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    VAR             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LET             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    CONST           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    ID              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    IF              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    WHILE           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    FOR             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    BREAK           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    TRY             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    THROW           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LBRACKET        reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    CONSOLE         reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    NUMBER          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    STRING          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    NOT             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    TRUE            reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    FALSE           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    $end            reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    TIMES           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    QUESTION        reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    PLUS            reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    MINUS           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    GT              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LT              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    GE              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    LE              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    AND             reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    OR              reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    COMMA           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    COLON           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    error           reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)
    CASE            reduce using rule 68 (console_log -> CONSOLE DOT LOG LPAREN arguments RPAREN .)


state 230

    (73) if_statement -> IF LPAREN condition RPAREN block ELSE block .

    RETURN          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    VAR             reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    LET             reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    CONST           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    ID              reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    FUNCTION        reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    IF              reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    WHILE           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    FOR             reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    BREAK           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    SWITCH          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    TRY             reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    THROW           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    LBRACKET        reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    CONSOLE         reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    NUMBER          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    STRING          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    LPAREN          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    NOT             reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    TRUE            reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    FALSE           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    LBRACE          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    $end            reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    RBRACE          reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    error           reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    DEFAULT         reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)
    CASE            reduce using rule 73 (if_statement -> IF LPAREN condition RPAREN block ELSE block .)


state 231

    (91) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update . RPAREN block

    RPAREN          shift and go to state 244


state 232

    (97) for_update -> assignment .

    RPAREN          reduce using rule 97 (for_update -> assignment .)


state 233

    (98) for_update -> expression .
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    RPAREN          reduce using rule 98 (for_update -> expression .)
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 234

    (99) for_update -> empty .

    RPAREN          reduce using rule 99 (for_update -> empty .)


state 235

    (33) assignment -> ID . ASSIGN expression
    (85) array_access -> ID . LBRACKET expression RBRACKET
    (53) factor -> ID .
    (67) method_call -> ID . DOT ID LPAREN arguments RPAREN
    (65) function_call -> ID . LPAREN arguments RPAREN
    (89) property_access -> ID . DOT ID

    ASSIGN          shift and go to state 73
    LBRACKET        shift and go to state 76
    TIMES           reduce using rule 53 (factor -> ID .)
    DIVIDE          reduce using rule 53 (factor -> ID .)
    QUESTION        reduce using rule 53 (factor -> ID .)
    PLUS            reduce using rule 53 (factor -> ID .)
    MINUS           reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    EQUALS          reduce using rule 53 (factor -> ID .)
    NOTEQUALS       reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    RPAREN          reduce using rule 53 (factor -> ID .)
    DOT             shift and go to state 74
    LPAREN          shift and go to state 75


state 236

    (106) switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block . RBRACE

    RBRACE          shift and go to state 245


state 237

    (107) case_blocks -> case_blocks case_block .

    DEFAULT         reduce using rule 107 (case_blocks -> case_blocks case_block .)
    CASE            reduce using rule 107 (case_blocks -> case_blocks case_block .)
    RBRACE          reduce using rule 107 (case_blocks -> case_blocks case_block .)


state 238

    (111) default_block -> DEFAULT . COLON statements

    COLON           shift and go to state 246


state 239

    (112) default_block -> empty .

    RBRACE          reduce using rule 112 (default_block -> empty .)


state 240

    (109) case_block -> CASE error . COLON
    (125) case_block -> CASE error . COLON statements

    COLON           shift and go to state 247


state 241

    (110) case_block -> CASE expression . COLON statements
    (34) expression -> expression . QUESTION expression COLON expression
    (36) expression -> expression . PLUS term
    (37) expression -> expression . MINUS term
    (38) expression -> expression . GT term
    (39) expression -> expression . LT term
    (40) expression -> expression . GE term
    (41) expression -> expression . LE term
    (42) expression -> expression . EQUALS term
    (43) expression -> expression . NOTEQUALS term
    (44) expression -> expression . AND term
    (45) expression -> expression . OR term

    COLON           shift and go to state 248
    QUESTION        shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQUALS          shift and go to state 58
    NOTEQUALS       shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 242

    (126) switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block . RBRACE

    RBRACE          shift and go to state 249


state 243

    (114) try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .

    RETURN          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    VAR             reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    LET             reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    CONST           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    ID              reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    FUNCTION        reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    IF              reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    WHILE           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    FOR             reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    BREAK           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    SWITCH          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    TRY             reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    THROW           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    LBRACKET        reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    CONSOLE         reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    NUMBER          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    STRING          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    LPAREN          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    NOT             reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    TRUE            reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    FALSE           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    LBRACE          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    $end            reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    RBRACE          reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    error           reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    DEFAULT         reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)
    CASE            reduce using rule 114 (try_catch_statement -> TRY block CATCH LPAREN ID RPAREN block .)


state 244

    (91) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN . block
    (87) block -> . LBRACE statements RBRACE
    (123) block -> . LBRACE statements error

    LBRACE          shift and go to state 99

    block                          shift and go to state 250

state 245

    (106) switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .

    RETURN          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    VAR             reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    LET             reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    CONST           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    ID              reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    FUNCTION        reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    IF              reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    WHILE           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    FOR             reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    BREAK           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    SWITCH          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    TRY             reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    THROW           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    LBRACKET        reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    CONSOLE         reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    NUMBER          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    STRING          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    LPAREN          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    NOT             reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    TRUE            reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    FALSE           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    LBRACE          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    $end            reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    RBRACE          reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    error           reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    DEFAULT         reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)
    CASE            reduce using rule 106 (switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE .)


state 246

    (111) default_block -> DEFAULT COLON . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (88) empty -> .
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    RETURN          shift and go to state 17
    RBRACE          reduce using rule 88 (empty -> .)
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! VAR             [ reduce using rule 88 (empty -> .) ]
  ! LET             [ reduce using rule 88 (empty -> .) ]
  ! CONST           [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! WHILE           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! BREAK           [ reduce using rule 88 (empty -> .) ]
  ! SWITCH          [ reduce using rule 88 (empty -> .) ]
  ! TRY             [ reduce using rule 88 (empty -> .) ]
  ! THROW           [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 88 (empty -> .) ]
  ! NUMBER          [ reduce using rule 88 (empty -> .) ]
  ! STRING          [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! NOT             [ reduce using rule 88 (empty -> .) ]
  ! TRUE            [ reduce using rule 88 (empty -> .) ]
  ! FALSE           [ reduce using rule 88 (empty -> .) ]
  ! LBRACE          [ reduce using rule 88 (empty -> .) ]

    statements                     shift and go to state 251
    statement                      shift and go to state 4
    empty                          shift and go to state 154
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 247

    (109) case_block -> CASE error COLON .
    (125) case_block -> CASE error COLON . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (88) empty -> .
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

  ! shift/reduce conflict for RETURN resolved as shift
  ! reduce/reduce conflict for DEFAULT resolved using rule 88 (empty -> .)
  ! reduce/reduce conflict for CASE resolved using rule 88 (empty -> .)
  ! reduce/reduce conflict for RBRACE resolved using rule 88 (empty -> .)
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    RETURN          shift and go to state 17
    DEFAULT         reduce using rule 88 (empty -> .)
    CASE            reduce using rule 88 (empty -> .)
    RBRACE          reduce using rule 88 (empty -> .)
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

  ! DEFAULT         [ reduce using rule 109 (case_block -> CASE error COLON .) ]
  ! CASE            [ reduce using rule 109 (case_block -> CASE error COLON .) ]
  ! RBRACE          [ reduce using rule 109 (case_block -> CASE error COLON .) ]
  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! VAR             [ reduce using rule 88 (empty -> .) ]
  ! LET             [ reduce using rule 88 (empty -> .) ]
  ! CONST           [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! WHILE           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! BREAK           [ reduce using rule 88 (empty -> .) ]
  ! SWITCH          [ reduce using rule 88 (empty -> .) ]
  ! TRY             [ reduce using rule 88 (empty -> .) ]
  ! THROW           [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 88 (empty -> .) ]
  ! NUMBER          [ reduce using rule 88 (empty -> .) ]
  ! STRING          [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! NOT             [ reduce using rule 88 (empty -> .) ]
  ! TRUE            [ reduce using rule 88 (empty -> .) ]
  ! FALSE           [ reduce using rule 88 (empty -> .) ]
  ! LBRACE          [ reduce using rule 88 (empty -> .) ]

    statements                     shift and go to state 252
    statement                      shift and go to state 4
    empty                          shift and go to state 154
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 248

    (110) case_block -> CASE expression COLON . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (88) empty -> .
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    RETURN          shift and go to state 17
    DEFAULT         reduce using rule 88 (empty -> .)
    CASE            reduce using rule 88 (empty -> .)
    RBRACE          reduce using rule 88 (empty -> .)
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! VAR             [ reduce using rule 88 (empty -> .) ]
  ! LET             [ reduce using rule 88 (empty -> .) ]
  ! CONST           [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! WHILE           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! BREAK           [ reduce using rule 88 (empty -> .) ]
  ! SWITCH          [ reduce using rule 88 (empty -> .) ]
  ! TRY             [ reduce using rule 88 (empty -> .) ]
  ! THROW           [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 88 (empty -> .) ]
  ! NUMBER          [ reduce using rule 88 (empty -> .) ]
  ! STRING          [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! NOT             [ reduce using rule 88 (empty -> .) ]
  ! TRUE            [ reduce using rule 88 (empty -> .) ]
  ! FALSE           [ reduce using rule 88 (empty -> .) ]
  ! LBRACE          [ reduce using rule 88 (empty -> .) ]

    expression                     shift and go to state 5
    statements                     shift and go to state 253
    statement                      shift and go to state 4
    empty                          shift and go to state 154
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 249

    (126) switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .

    RETURN          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    VAR             reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    LET             reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    CONST           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    ID              reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    FUNCTION        reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    IF              reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    WHILE           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    FOR             reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    BREAK           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    SWITCH          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    TRY             reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    THROW           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    LBRACKET        reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    CONSOLE         reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    NUMBER          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    STRING          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    LPAREN          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    NOT             reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    TRUE            reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    FALSE           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    LBRACE          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    $end            reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    RBRACE          reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    error           reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    DEFAULT         reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)
    CASE            reduce using rule 126 (switch_statement -> SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE .)


state 250

    (91) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .

    RETURN          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    VAR             reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    LET             reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    CONST           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    ID              reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    FUNCTION        reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    IF              reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    WHILE           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    FOR             reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    BREAK           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    SWITCH          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    TRY             reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    THROW           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    LBRACKET        reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    CONSOLE         reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    NUMBER          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    STRING          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    LPAREN          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    NOT             reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    TRUE            reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    FALSE           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    LBRACE          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    $end            reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    RBRACE          reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    error           reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    DEFAULT         reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)
    CASE            reduce using rule 91 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block .)


state 251

    (111) default_block -> DEFAULT COLON statements .
    (4) statements -> statements . statement
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

    RBRACE          reduce using rule 111 (default_block -> DEFAULT COLON statements .)
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

    statement                      shift and go to state 49
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 252

    (125) case_block -> CASE error COLON statements .
    (4) statements -> statements . statement
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

    DEFAULT         reduce using rule 125 (case_block -> CASE error COLON statements .)
    CASE            reduce using rule 125 (case_block -> CASE error COLON statements .)
    RBRACE          reduce using rule 125 (case_block -> CASE error COLON statements .)
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

    statement                      shift and go to state 49
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46

state 253

    (110) case_block -> CASE expression COLON statements .
    (4) statements -> statements . statement
    (6) statement -> . expression
    (7) statement -> . declaration
    (8) statement -> . assignment
    (9) statement -> . method_call
    (10) statement -> . expression SEMICOLON
    (11) statement -> . declaration SEMICOLON
    (12) statement -> . assignment SEMICOLON
    (13) statement -> . method_call SEMICOLON
    (14) statement -> . function_declaration
    (15) statement -> . if_statement
    (16) statement -> . while_statement
    (17) statement -> . for_statement
    (18) statement -> . break_statement
    (19) statement -> . switch_statement
    (20) statement -> . try_catch_statement
    (21) statement -> . throw_statement
    (26) statement -> . RETURN expression SEMICOLON
    (34) expression -> . expression QUESTION expression COLON expression
    (35) expression -> . term
    (36) expression -> . expression PLUS term
    (37) expression -> . expression MINUS term
    (38) expression -> . expression GT term
    (39) expression -> . expression LT term
    (40) expression -> . expression GE term
    (41) expression -> . expression LE term
    (42) expression -> . expression EQUALS term
    (43) expression -> . expression NOTEQUALS term
    (44) expression -> . expression AND term
    (45) expression -> . expression OR term
    (46) expression -> . array_literal
    (47) expression -> . array_access
    (27) declaration -> . VAR ID
    (28) declaration -> . LET ID
    (29) declaration -> . CONST ID
    (30) declaration -> . VAR ID ASSIGN expression
    (31) declaration -> . LET ID ASSIGN expression
    (32) declaration -> . CONST ID ASSIGN expression
    (117) declaration -> . VAR error
    (118) declaration -> . LET error
    (119) declaration -> . CONST error
    (33) assignment -> . ID ASSIGN expression
    (66) method_call -> . console_log
    (67) method_call -> . ID DOT ID LPAREN arguments RPAREN
    (22) function_declaration -> . FUNCTION ID LPAREN parameter_list RPAREN block
    (124) function_declaration -> . FUNCTION ID LPAREN error RPAREN block
    (72) if_statement -> . IF LPAREN condition RPAREN block
    (73) if_statement -> . IF LPAREN condition RPAREN block ELSE block
    (116) if_statement -> . IF error block
    (122) if_statement -> . IF LPAREN error block
    (86) while_statement -> . WHILE LPAREN condition RPAREN block
    (91) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN block
    (121) for_statement -> . FOR error block
    (90) break_statement -> . BREAK SEMICOLON
    (106) switch_statement -> . SWITCH LPAREN expression RPAREN LBRACE case_blocks default_block RBRACE
    (120) switch_statement -> . SWITCH error block
    (126) switch_statement -> . SWITCH LPAREN error RPAREN LBRACE case_blocks default_block RBRACE
    (114) try_catch_statement -> . TRY block CATCH LPAREN ID RPAREN block
    (115) throw_statement -> . THROW expression SEMICOLON
    (48) term -> . factor
    (49) term -> . term TIMES factor
    (50) term -> . term DIVIDE factor
    (81) array_literal -> . LBRACKET array_elements RBRACKET
    (85) array_access -> . ID LBRACKET expression RBRACKET
    (68) console_log -> . CONSOLE DOT LOG LPAREN arguments RPAREN
    (51) factor -> . NUMBER
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . LPAREN expression RPAREN
    (55) factor -> . method_call
    (56) factor -> . function_call
    (57) factor -> . array_access
    (58) factor -> . property_access
    (59) factor -> . NOT factor
    (60) factor -> . object_literal
    (61) factor -> . arrow_function
    (62) factor -> . anonymous_function
    (63) factor -> . TRUE
    (64) factor -> . FALSE
    (65) function_call -> . ID LPAREN arguments RPAREN
    (89) property_access -> . ID DOT ID
    (100) object_literal -> . LBRACE object_properties RBRACE
    (105) arrow_function -> . LPAREN parameter_list RPAREN ARROW expression
    (113) anonymous_function -> . FUNCTION LPAREN parameter_list RPAREN block

    DEFAULT         reduce using rule 110 (case_block -> CASE expression COLON statements .)
    CASE            reduce using rule 110 (case_block -> CASE expression COLON statements .)
    RBRACE          reduce using rule 110 (case_block -> CASE expression COLON statements .)
    RETURN          shift and go to state 17
    VAR             shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24
    ID              shift and go to state 22
    FUNCTION        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    BREAK           shift and go to state 31
    SWITCH          shift and go to state 32
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    LBRACKET        shift and go to state 37
    CONSOLE         shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    LPAREN          shift and go to state 26
    NOT             shift and go to state 43
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    LBRACE          shift and go to state 33

    expression                     shift and go to state 5
    statement                      shift and go to state 49
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    method_call                    shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    break_statement                shift and go to state 13
    switch_statement               shift and go to state 14
    try_catch_statement            shift and go to state 15
    throw_statement                shift and go to state 16
    term                           shift and go to state 18
    array_literal                  shift and go to state 19
    array_access                   shift and go to state 20
    console_log                    shift and go to state 25
    factor                         shift and go to state 36
    function_call                  shift and go to state 41
    property_access                shift and go to state 42
    object_literal                 shift and go to state 44
    arrow_function                 shift and go to state 45
    anonymous_function             shift and go to state 46
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for LET in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for THROW in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 0 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 8 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 18 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 18 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 66 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 66 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 99 resolved as shift
WARNING: shift/reduce conflict for VAR in state 99 resolved as shift
WARNING: shift/reduce conflict for LET in state 99 resolved as shift
WARNING: shift/reduce conflict for CONST in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 99 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 99 resolved as shift
WARNING: shift/reduce conflict for TRY in state 99 resolved as shift
WARNING: shift/reduce conflict for THROW in state 99 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 99 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 99 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 99 resolved as shift
WARNING: shift/reduce conflict for STRING in state 99 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT in state 99 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 99 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 99 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 99 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 191 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 191 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 191 resolved as shift
WARNING: shift/reduce conflict for GT in state 191 resolved as shift
WARNING: shift/reduce conflict for LT in state 191 resolved as shift
WARNING: shift/reduce conflict for GE in state 191 resolved as shift
WARNING: shift/reduce conflict for LE in state 191 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 191 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 191 resolved as shift
WARNING: shift/reduce conflict for AND in state 191 resolved as shift
WARNING: shift/reduce conflict for OR in state 191 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 194 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for GT in state 194 resolved as shift
WARNING: shift/reduce conflict for LT in state 194 resolved as shift
WARNING: shift/reduce conflict for GE in state 194 resolved as shift
WARNING: shift/reduce conflict for LE in state 194 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 194 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 194 resolved as shift
WARNING: shift/reduce conflict for AND in state 194 resolved as shift
WARNING: shift/reduce conflict for OR in state 194 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 246 resolved as shift
WARNING: shift/reduce conflict for VAR in state 246 resolved as shift
WARNING: shift/reduce conflict for LET in state 246 resolved as shift
WARNING: shift/reduce conflict for CONST in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 246 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 246 resolved as shift
WARNING: shift/reduce conflict for IF in state 246 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 246 resolved as shift
WARNING: shift/reduce conflict for FOR in state 246 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 246 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 246 resolved as shift
WARNING: shift/reduce conflict for TRY in state 246 resolved as shift
WARNING: shift/reduce conflict for THROW in state 246 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 246 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 246 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 246 resolved as shift
WARNING: shift/reduce conflict for STRING in state 246 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 246 resolved as shift
WARNING: shift/reduce conflict for NOT in state 246 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 246 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 246 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 246 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 247 resolved as shift
WARNING: shift/reduce conflict for VAR in state 247 resolved as shift
WARNING: shift/reduce conflict for LET in state 247 resolved as shift
WARNING: shift/reduce conflict for CONST in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 247 resolved as shift
WARNING: shift/reduce conflict for IF in state 247 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 247 resolved as shift
WARNING: shift/reduce conflict for FOR in state 247 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 247 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 247 resolved as shift
WARNING: shift/reduce conflict for TRY in state 247 resolved as shift
WARNING: shift/reduce conflict for THROW in state 247 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 247 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 247 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 247 resolved as shift
WARNING: shift/reduce conflict for STRING in state 247 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 247 resolved as shift
WARNING: shift/reduce conflict for NOT in state 247 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 247 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 247 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 247 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 248 resolved as shift
WARNING: shift/reduce conflict for VAR in state 248 resolved as shift
WARNING: shift/reduce conflict for LET in state 248 resolved as shift
WARNING: shift/reduce conflict for CONST in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for FOR in state 248 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 248 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 248 resolved as shift
WARNING: shift/reduce conflict for TRY in state 248 resolved as shift
WARNING: shift/reduce conflict for THROW in state 248 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 248 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 248 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 248 resolved as shift
WARNING: shift/reduce conflict for STRING in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for NOT in state 248 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 248 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 248 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 248 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (program -> empty)
WARNING: rejected rule (statements -> empty) in state 3
WARNING: reduce/reduce conflict in state 8 resolved using rule (statement -> method_call)
WARNING: rejected rule (factor -> method_call) in state 8
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> array_access)
WARNING: rejected rule (factor -> array_access) in state 20
WARNING: reduce/reduce conflict in state 83 resolved using rule (parameter_list -> ID)
WARNING: rejected rule (factor -> ID) in state 83
WARNING: reduce/reduce conflict in state 200 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression GT term) in state 200
WARNING: reduce/reduce conflict in state 202 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression LT term) in state 202
WARNING: reduce/reduce conflict in state 204 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression GE term) in state 204
WARNING: reduce/reduce conflict in state 206 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression LE term) in state 206
WARNING: reduce/reduce conflict in state 208 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression EQUALS term) in state 208
WARNING: reduce/reduce conflict in state 210 resolved using rule (expression -> term)
WARNING: rejected rule (expression -> expression NOTEQUALS term) in state 210
WARNING: reduce/reduce conflict in state 247 resolved using rule (empty -> <empty>)
WARNING: rejected rule (case_block -> CASE error COLON) in state 247
WARNING: Rule (case_block -> CASE error COLON) is never reduced
